
LAB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e8  080026e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026e8  080026e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e8  080026e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e8  080026e8  000126e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080026fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080026fc  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ba0  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001419  00000000  00000000  00027bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  00028ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  00029928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018515  00000000  00000000  0002a1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009698  00000000  00000000  000426cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920dc  00000000  00000000  0004bd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dde41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002608  00000000  00000000  000dde94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080026b0 	.word	0x080026b0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080026b0 	.word	0x080026b0

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fbeb 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f89b 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 fa43 	bl	80006bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000236:	f000 f8e3 	bl	8000400 <MX_TIM2_Init>
  MX_TIM3_Init();
 800023a:	f000 f92d 	bl	8000498 <MX_TIM3_Init>
  MX_TIM4_Init();
 800023e:	f000 f9a3 	bl	8000588 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	4842      	ldr	r0, [pc, #264]	; (8000350 <main+0x12c>)
 8000246:	f001 fbaf 	bl	80019a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800024a:	2100      	movs	r1, #0
 800024c:	4841      	ldr	r0, [pc, #260]	; (8000354 <main+0x130>)
 800024e:	f001 fbab 	bl	80019a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000252:	2100      	movs	r1, #0
 8000254:	4840      	ldr	r0, [pc, #256]	; (8000358 <main+0x134>)
 8000256:	f001 fba7 	bl	80019a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800025a:	2104      	movs	r1, #4
 800025c:	483e      	ldr	r0, [pc, #248]	; (8000358 <main+0x134>)
 800025e:	f001 fba3 	bl	80019a8 <HAL_TIM_PWM_Start>
  int btnFlag = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (btnFlag == 1) {
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d15a      	bne.n	8000322 <main+0xfe>
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 800026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000270:	483a      	ldr	r0, [pc, #232]	; (800035c <main+0x138>)
 8000272:	f000 fea1 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d119      	bne.n	80002b0 <main+0x8c>
 800027c:	2101      	movs	r1, #1
 800027e:	4838      	ldr	r0, [pc, #224]	; (8000360 <main+0x13c>)
 8000280:	f000 fe9a 	bl	8000fb8 <HAL_GPIO_ReadPin>
 8000284:	4603      	mov	r3, r0
 8000286:	2b01      	cmp	r3, #1
 8000288:	d112      	bne.n	80002b0 <main+0x8c>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	4835      	ldr	r0, [pc, #212]	; (8000364 <main+0x140>)
 8000290:	f000 fea9 	bl	8000fe6 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_AUTORELOAD(&htim4,1799);
 8000294:	4b30      	ldr	r3, [pc, #192]	; (8000358 <main+0x134>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f240 7207 	movw	r2, #1799	; 0x707
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
 800029e:	4b2e      	ldr	r3, [pc, #184]	; (8000358 <main+0x134>)
 80002a0:	f240 7207 	movw	r2, #1799	; 0x707
 80002a4:	60da      	str	r2, [r3, #12]
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 90);
 80002a6:	4b2c      	ldr	r3, [pc, #176]	; (8000358 <main+0x134>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	225a      	movs	r2, #90	; 0x5a
 80002ac:	639a      	str	r2, [r3, #56]	; 0x38
 80002ae:	e038      	b.n	8000322 <main+0xfe>
		  } else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	4829      	ldr	r0, [pc, #164]	; (800035c <main+0x138>)
 80002b6:	f000 fe7f 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d119      	bne.n	80002f4 <main+0xd0>
 80002c0:	2101      	movs	r1, #1
 80002c2:	4827      	ldr	r0, [pc, #156]	; (8000360 <main+0x13c>)
 80002c4:	f000 fe78 	bl	8000fb8 <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d112      	bne.n	80002f4 <main+0xd0>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2102      	movs	r1, #2
 80002d2:	4824      	ldr	r0, [pc, #144]	; (8000364 <main+0x140>)
 80002d4:	f000 fe87 	bl	8000fe6 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_AUTORELOAD(&htim4,1799);
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <main+0x134>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f240 7207 	movw	r2, #1799	; 0x707
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80002e2:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <main+0x134>)
 80002e4:	f240 7207 	movw	r2, #1799	; 0x707
 80002e8:	60da      	str	r2, [r3, #12]
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 45);
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <main+0x134>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	222d      	movs	r2, #45	; 0x2d
 80002f0:	639a      	str	r2, [r3, #56]	; 0x38
 80002f2:	e016      	b.n	8000322 <main+0xfe>
		  } else {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2101      	movs	r1, #1
 80002f8:	481a      	ldr	r0, [pc, #104]	; (8000364 <main+0x140>)
 80002fa:	f000 fe74 	bl	8000fe6 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4818      	ldr	r0, [pc, #96]	; (8000364 <main+0x140>)
 8000304:	f000 fe6f 	bl	8000fe6 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_AUTORELOAD(&htim4,1799);
 8000308:	4b13      	ldr	r3, [pc, #76]	; (8000358 <main+0x134>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f240 7207 	movw	r2, #1799	; 0x707
 8000310:	62da      	str	r2, [r3, #44]	; 0x2c
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <main+0x134>)
 8000314:	f240 7207 	movw	r2, #1799	; 0x707
 8000318:	60da      	str	r2, [r3, #12]
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 68);
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <main+0x134>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2244      	movs	r2, #68	; 0x44
 8000320:	639a      	str	r2, [r3, #56]	; 0x38
		  }
	  }

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	480d      	ldr	r0, [pc, #52]	; (800035c <main+0x138>)
 8000328:	f000 fe46 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	2b01      	cmp	r3, #1
 8000330:	d006      	beq.n	8000340 <main+0x11c>
 8000332:	2101      	movs	r1, #1
 8000334:	480a      	ldr	r0, [pc, #40]	; (8000360 <main+0x13c>)
 8000336:	f000 fe3f 	bl	8000fb8 <HAL_GPIO_ReadPin>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d192      	bne.n	8000266 <main+0x42>
		  btnFlag = 1;
 8000340:	2301      	movs	r3, #1
 8000342:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2120      	movs	r1, #32
 8000348:	4806      	ldr	r0, [pc, #24]	; (8000364 <main+0x140>)
 800034a:	f000 fe4c 	bl	8000fe6 <HAL_GPIO_WritePin>
	  if (btnFlag == 1) {
 800034e:	e78a      	b.n	8000266 <main+0x42>
 8000350:	20000028 	.word	0x20000028
 8000354:	20000070 	.word	0x20000070
 8000358:	200000b8 	.word	0x200000b8
 800035c:	40011000 	.word	0x40011000
 8000360:	40010800 	.word	0x40010800
 8000364:	40010c00 	.word	0x40010c00

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	; 0x40
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	; 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 f992 	bl	80026a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038a:	2301      	movs	r3, #1
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000398:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80003a8:	2300      	movs	r3, #0
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fe31 	bl	8001018 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003bc:	f000 f9f2 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f89e 	bl	800151c <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003e6:	f000 f9dd 	bl	80007a4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003f0:	2000      	movs	r0, #0
 80003f2:	f001 f97d 	bl	80016f0 <HAL_RCC_MCOConfig>
}
 80003f6:	bf00      	nop
 80003f8:	3740      	adds	r7, #64	; 0x40
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b086      	sub	sp, #24
 8000404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000414:	463b      	mov	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800041c:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <MX_TIM2_Init+0x94>)
 800041e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_TIM2_Init+0x94>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <MX_TIM2_Init+0x94>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_TIM2_Init+0x94>)
 8000432:	f240 321f 	movw	r2, #799	; 0x31f
 8000436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_TIM2_Init+0x94>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_TIM2_Init+0x94>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <MX_TIM2_Init+0x94>)
 8000446:	f001 fa07 	bl	8001858 <HAL_TIM_Base_Init>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000450:	f000 f9a8 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	4619      	mov	r1, r3
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <MX_TIM2_Init+0x94>)
 8000462:	f001 fc19 	bl	8001c98 <HAL_TIM_ConfigClockSource>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800046c:	f000 f99a 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000470:	2320      	movs	r3, #32
 8000472:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_TIM2_Init+0x94>)
 800047e:	f002 f87f 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000488:	f000 f98c 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000028 	.word	0x20000028

08000498 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08e      	sub	sp, #56	; 0x38
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800049e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ac:	f107 0320 	add.w	r3, r7, #32
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
 80004c4:	615a      	str	r2, [r3, #20]
 80004c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004c8:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004ca:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <MX_TIM3_Init+0xec>)
 80004cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004ce:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d4:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004dc:	f240 321f 	movw	r2, #799	; 0x31f
 80004e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e8:	4b25      	ldr	r3, [pc, #148]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004ee:	4824      	ldr	r0, [pc, #144]	; (8000580 <MX_TIM3_Init+0xe8>)
 80004f0:	f001 f9b2 	bl	8001858 <HAL_TIM_Base_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80004fa:	f000 f953 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000508:	4619      	mov	r1, r3
 800050a:	481d      	ldr	r0, [pc, #116]	; (8000580 <MX_TIM3_Init+0xe8>)
 800050c:	f001 fbc4 	bl	8001c98 <HAL_TIM_ConfigClockSource>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000516:	f000 f945 	bl	80007a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800051a:	4819      	ldr	r0, [pc, #100]	; (8000580 <MX_TIM3_Init+0xe8>)
 800051c:	f001 f9eb 	bl	80018f6 <HAL_TIM_PWM_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000526:	f000 f93d 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800052a:	2320      	movs	r3, #32
 800052c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	4619      	mov	r1, r3
 8000538:	4811      	ldr	r0, [pc, #68]	; (8000580 <MX_TIM3_Init+0xe8>)
 800053a:	f002 f821 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000544:	f000 f92e 	bl	80007a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000548:	2360      	movs	r3, #96	; 0x60
 800054a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 800054c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2200      	movs	r2, #0
 800055e:	4619      	mov	r1, r3
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <MX_TIM3_Init+0xe8>)
 8000562:	f001 fadb 	bl	8001b1c <HAL_TIM_PWM_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800056c:	f000 f91a 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <MX_TIM3_Init+0xe8>)
 8000572:	f000 f993 	bl	800089c <HAL_TIM_MspPostInit>

}
 8000576:	bf00      	nop
 8000578:	3738      	adds	r7, #56	; 0x38
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000070 	.word	0x20000070
 8000584:	40000400 	.word	0x40000400

08000588 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b092      	sub	sp, #72	; 0x48
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800059c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
 80005c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80005c8:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005ca:	4a3b      	ldr	r2, [pc, #236]	; (80006b8 <MX_TIM4_Init+0x130>)
 80005cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80005ce:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d4:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 128;
 80005da:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005dc:	2280      	movs	r2, #128	; 0x80
 80005de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e0:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80005ec:	4831      	ldr	r0, [pc, #196]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80005ee:	f001 f933 	bl	8001858 <HAL_TIM_Base_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80005f8:	f000 f8d4 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000602:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000606:	4619      	mov	r1, r3
 8000608:	482a      	ldr	r0, [pc, #168]	; (80006b4 <MX_TIM4_Init+0x12c>)
 800060a:	f001 fb45 	bl	8001c98 <HAL_TIM_ConfigClockSource>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000614:	f000 f8c6 	bl	80007a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000618:	4826      	ldr	r0, [pc, #152]	; (80006b4 <MX_TIM4_Init+0x12c>)
 800061a:	f001 f96c 	bl	80018f6 <HAL_TIM_PWM_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000624:	f000 f8be 	bl	80007a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000628:	2305      	movs	r3, #5
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800062c:	2320      	movs	r3, #32
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000634:	4619      	mov	r1, r3
 8000636:	481f      	ldr	r0, [pc, #124]	; (80006b4 <MX_TIM4_Init+0x12c>)
 8000638:	f001 fbf2 	bl	8001e20 <HAL_TIM_SlaveConfigSynchro>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8000642:	f000 f8af 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	4817      	ldr	r0, [pc, #92]	; (80006b4 <MX_TIM4_Init+0x12c>)
 8000656:	f001 ff93 	bl	8002580 <HAL_TIMEx_MasterConfigSynchronization>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000660:	f000 f8a0 	bl	80007a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 38;
 8000668:	2326      	movs	r3, #38	; 0x26
 800066a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	4619      	mov	r1, r3
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_TIM4_Init+0x12c>)
 800067c:	f001 fa4e 	bl	8001b1c <HAL_TIM_PWM_ConfigChannel>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000686:	f000 f88d 	bl	80007a4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	2204      	movs	r2, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <MX_TIM4_Init+0x12c>)
 8000696:	f001 fa41 	bl	8001b1c <HAL_TIM_PWM_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 80006a0:	f000 f880 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006a4:	4803      	ldr	r0, [pc, #12]	; (80006b4 <MX_TIM4_Init+0x12c>)
 80006a6:	f000 f8f9 	bl	800089c <HAL_TIM_MspPostInit>

}
 80006aa:	bf00      	nop
 80006ac:	3748      	adds	r7, #72	; 0x48
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000b8 	.word	0x200000b8
 80006b8:	40000800 	.word	0x40000800

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_GPIO_Init+0xd8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <MX_GPIO_Init+0xd8>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_GPIO_Init+0xd8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_GPIO_Init+0xd8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a29      	ldr	r2, [pc, #164]	; (8000794 <MX_GPIO_Init+0xd8>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_GPIO_Init+0xd8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_GPIO_Init+0xd8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a23      	ldr	r2, [pc, #140]	; (8000794 <MX_GPIO_Init+0xd8>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_GPIO_Init+0xd8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2123      	movs	r1, #35	; 0x23
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <MX_GPIO_Init+0xdc>)
 800071e:	f000 fc62 	bl	8000fe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	4819      	ldr	r0, [pc, #100]	; (800079c <MX_GPIO_Init+0xe0>)
 8000738:	f000 faaa 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <MX_GPIO_Init+0xe4>)
 8000750:	f000 fa9e 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000754:	2323      	movs	r3, #35	; 0x23
 8000756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075c:	2301      	movs	r3, #1
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <MX_GPIO_Init+0xdc>)
 800076c:	f000 fa90 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <MX_GPIO_Init+0xe4>)
 8000786:	f000 fa83 	bl	8000c90 <HAL_GPIO_Init>

}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	40010c00 	.word	0x40010c00
 800079c:	40011000 	.word	0x40011000
 80007a0:	40010800 	.word	0x40010800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <HAL_MspInit+0x5c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_MspInit+0x5c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_MspInit+0x5c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x5c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x5c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x5c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_MspInit+0x60>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_MspInit+0x60>)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000

08000814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000824:	d10c      	bne.n	8000840 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	61d3      	str	r3, [r2, #28]
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800083e:	e022      	b.n	8000886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a13      	ldr	r2, [pc, #76]	; (8000894 <HAL_TIM_Base_MspInit+0x80>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d10c      	bne.n	8000864 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
}
 8000862:	e010      	b.n	8000886 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <HAL_TIM_Base_MspInit+0x84>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d10b      	bne.n	8000886 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_TIM_Base_MspInit+0x7c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
}
 8000886:	bf00      	nop
 8000888:	371c      	adds	r7, #28
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	40000400 	.word	0x40000400
 8000898:	40000800 	.word	0x40000800

0800089c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a24      	ldr	r2, [pc, #144]	; (8000948 <HAL_TIM_MspPostInit+0xac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d118      	bne.n	80008ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	481a      	ldr	r0, [pc, #104]	; (8000950 <HAL_TIM_MspPostInit+0xb4>)
 80008e8:	f000 f9d2 	bl	8000c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80008ec:	e028      	b.n	8000940 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM4)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <HAL_TIM_MspPostInit+0xb8>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d123      	bne.n	8000940 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <HAL_TIM_MspPostInit+0xbc>)
 8000924:	f000 f9b4 	bl	8000c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_TIM_MspPostInit+0xbc>)
 800093c:	f000 f9a8 	bl	8000c90 <HAL_GPIO_Init>
}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40000400 	.word	0x40000400
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800
 8000954:	40000800 	.word	0x40000800
 8000958:	40010c00 	.word	0x40010c00

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <NMI_Handler+0x4>

08000962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <MemManage_Handler+0x4>

0800096e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <UsageFault_Handler+0x4>

0800097a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 f875 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}

080009aa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
	...

080009b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009de:	f7ff ffe4 	bl	80009aa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e2:	f001 fe39 	bl	8002658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e6:	f7ff fc1d 	bl	8000224 <main>
  bx lr
 80009ea:	4770      	bx	lr
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009f4:	080026f0 	.word	0x080026f0
  ldr r2, =_sbss
 80009f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009fc:	20000104 	.word	0x20000104

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f907 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff fec6 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f911 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f8e7 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000100 	.word	0x20000100

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000100 	.word	0x20000100

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff90 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff49 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff5e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff90 	bl	8000b80 <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5f 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffb0 	bl	8000be4 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca2:	e179      	b.n	8000f98 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	f040 8168 	bne.w	8000f92 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	4a96      	ldr	r2, [pc, #600]	; (8000f20 <HAL_GPIO_Init+0x290>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d05e      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ccc:	4a94      	ldr	r2, [pc, #592]	; (8000f20 <HAL_GPIO_Init+0x290>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d875      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cd2:	4a94      	ldr	r2, [pc, #592]	; (8000f24 <HAL_GPIO_Init+0x294>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d058      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cd8:	4a92      	ldr	r2, [pc, #584]	; (8000f24 <HAL_GPIO_Init+0x294>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d86f      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cde:	4a92      	ldr	r2, [pc, #584]	; (8000f28 <HAL_GPIO_Init+0x298>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d052      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000ce4:	4a90      	ldr	r2, [pc, #576]	; (8000f28 <HAL_GPIO_Init+0x298>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d869      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cea:	4a90      	ldr	r2, [pc, #576]	; (8000f2c <HAL_GPIO_Init+0x29c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d04c      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cf0:	4a8e      	ldr	r2, [pc, #568]	; (8000f2c <HAL_GPIO_Init+0x29c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d863      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000cf6:	4a8e      	ldr	r2, [pc, #568]	; (8000f30 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d046      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
 8000cfc:	4a8c      	ldr	r2, [pc, #560]	; (8000f30 <HAL_GPIO_Init+0x2a0>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d85d      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d02:	2b12      	cmp	r3, #18
 8000d04:	d82a      	bhi.n	8000d5c <HAL_GPIO_Init+0xcc>
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d859      	bhi.n	8000dbe <HAL_GPIO_Init+0x12e>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <HAL_GPIO_Init+0x80>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d8b 	.word	0x08000d8b
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d77 	.word	0x08000d77
 8000d1c:	08000db9 	.word	0x08000db9
 8000d20:	08000dbf 	.word	0x08000dbf
 8000d24:	08000dbf 	.word	0x08000dbf
 8000d28:	08000dbf 	.word	0x08000dbf
 8000d2c:	08000dbf 	.word	0x08000dbf
 8000d30:	08000dbf 	.word	0x08000dbf
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000dbf 	.word	0x08000dbf
 8000d3c:	08000dbf 	.word	0x08000dbf
 8000d40:	08000dbf 	.word	0x08000dbf
 8000d44:	08000dbf 	.word	0x08000dbf
 8000d48:	08000dbf 	.word	0x08000dbf
 8000d4c:	08000dbf 	.word	0x08000dbf
 8000d50:	08000dbf 	.word	0x08000dbf
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d81 	.word	0x08000d81
 8000d5c:	4a75      	ldr	r2, [pc, #468]	; (8000f34 <HAL_GPIO_Init+0x2a4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d62:	e02c      	b.n	8000dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e029      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	3304      	adds	r3, #4
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e024      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	623b      	str	r3, [r7, #32]
          break;
 8000d7e:	e01f      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	330c      	adds	r3, #12
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e01a      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d92:	2304      	movs	r3, #4
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e013      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d105      	bne.n	8000dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	611a      	str	r2, [r3, #16]
          break;
 8000daa:	e009      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dac:	2308      	movs	r3, #8
 8000dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69fa      	ldr	r2, [r7, #28]
 8000db4:	615a      	str	r2, [r3, #20]
          break;
 8000db6:	e003      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e000      	b.n	8000dc0 <HAL_GPIO_Init+0x130>
          break;
 8000dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2bff      	cmp	r3, #255	; 0xff
 8000dc4:	d801      	bhi.n	8000dca <HAL_GPIO_Init+0x13a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	e001      	b.n	8000dce <HAL_GPIO_Init+0x13e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2bff      	cmp	r3, #255	; 0xff
 8000dd4:	d802      	bhi.n	8000ddc <HAL_GPIO_Init+0x14c>
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x152>
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	3b08      	subs	r3, #8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	210f      	movs	r1, #15
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	401a      	ands	r2, r3
 8000df4:	6a39      	ldr	r1, [r7, #32]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80c1 	beq.w	8000f92 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <HAL_GPIO_Init+0x2a8>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e28:	4a44      	ldr	r2, [pc, #272]	; (8000f3c <HAL_GPIO_Init+0x2ac>)
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	220f      	movs	r2, #15
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3c      	ldr	r2, [pc, #240]	; (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d01f      	beq.n	8000e94 <HAL_GPIO_Init+0x204>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3b      	ldr	r2, [pc, #236]	; (8000f44 <HAL_GPIO_Init+0x2b4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d019      	beq.n	8000e90 <HAL_GPIO_Init+0x200>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d013      	beq.n	8000e8c <HAL_GPIO_Init+0x1fc>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a39      	ldr	r2, [pc, #228]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d00d      	beq.n	8000e88 <HAL_GPIO_Init+0x1f8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a38      	ldr	r2, [pc, #224]	; (8000f50 <HAL_GPIO_Init+0x2c0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d007      	beq.n	8000e84 <HAL_GPIO_Init+0x1f4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a37      	ldr	r2, [pc, #220]	; (8000f54 <HAL_GPIO_Init+0x2c4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d101      	bne.n	8000e80 <HAL_GPIO_Init+0x1f0>
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	e00a      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e80:	2306      	movs	r3, #6
 8000e82:	e008      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e004      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e002      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e94:	2300      	movs	r3, #0
 8000e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e98:	f002 0203 	and.w	r2, r2, #3
 8000e9c:	0092      	lsls	r2, r2, #2
 8000e9e:	4093      	lsls	r3, r2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ea6:	4925      	ldr	r1, [pc, #148]	; (8000f3c <HAL_GPIO_Init+0x2ac>)
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4920      	ldr	r1, [pc, #128]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	491a      	ldr	r1, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4916      	ldr	r1, [pc, #88]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d025      	beq.n	8000f5c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4910      	ldr	r1, [pc, #64]	; (8000f58 <HAL_GPIO_Init+0x2c8>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
 8000f1c:	e025      	b.n	8000f6a <HAL_GPIO_Init+0x2da>
 8000f1e:	bf00      	nop
 8000f20:	10320000 	.word	0x10320000
 8000f24:	10310000 	.word	0x10310000
 8000f28:	10220000 	.word	0x10220000
 8000f2c:	10210000 	.word	0x10210000
 8000f30:	10120000 	.word	0x10120000
 8000f34:	10110000 	.word	0x10110000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	40010c00 	.word	0x40010c00
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40011400 	.word	0x40011400
 8000f50:	40011800 	.word	0x40011800
 8000f54:	40011c00 	.word	0x40011c00
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4913      	ldr	r1, [pc, #76]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60cb      	str	r3, [r1, #12]
 8000f82:	e006      	b.n	8000f92 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	4909      	ldr	r1, [pc, #36]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	3301      	adds	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f47f ae7e 	bne.w	8000ca4 <HAL_GPIO_Init+0x14>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	372c      	adds	r7, #44	; 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e001      	b.n	8000fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	807b      	strh	r3, [r7, #2]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff6:	787b      	ldrb	r3, [r7, #1]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffc:	887a      	ldrh	r2, [r7, #2]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001002:	e003      	b.n	800100c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	041a      	lsls	r2, r3, #16
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
	...

08001018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e272      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8087 	beq.w	8001146 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001038:	4b92      	ldr	r3, [pc, #584]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 030c 	and.w	r3, r3, #12
 8001040:	2b04      	cmp	r3, #4
 8001042:	d00c      	beq.n	800105e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001044:	4b8f      	ldr	r3, [pc, #572]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 030c 	and.w	r3, r3, #12
 800104c:	2b08      	cmp	r3, #8
 800104e:	d112      	bne.n	8001076 <HAL_RCC_OscConfig+0x5e>
 8001050:	4b8c      	ldr	r3, [pc, #560]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800105c:	d10b      	bne.n	8001076 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105e:	4b89      	ldr	r3, [pc, #548]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d06c      	beq.n	8001144 <HAL_RCC_OscConfig+0x12c>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d168      	bne.n	8001144 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e24c      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x76>
 8001080:	4b80      	ldr	r3, [pc, #512]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a7f      	ldr	r2, [pc, #508]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e02e      	b.n	80010ec <HAL_RCC_OscConfig+0xd4>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001096:	4b7b      	ldr	r3, [pc, #492]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a7a      	ldr	r2, [pc, #488]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b78      	ldr	r3, [pc, #480]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a77      	ldr	r2, [pc, #476]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e01d      	b.n	80010ec <HAL_RCC_OscConfig+0xd4>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0xbc>
 80010ba:	4b72      	ldr	r3, [pc, #456]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a71      	ldr	r2, [pc, #452]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b6f      	ldr	r3, [pc, #444]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a6e      	ldr	r2, [pc, #440]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0xd4>
 80010d4:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a6a      	ldr	r2, [pc, #424]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b68      	ldr	r3, [pc, #416]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a67      	ldr	r2, [pc, #412]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fcde 	bl	8000ab4 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fcda 	bl	8000ab4 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e200      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0xe4>
 800111a:	e014      	b.n	8001146 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fcca 	bl	8000ab4 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fcc6 	bl	8000ab4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1ec      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x10c>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d063      	beq.n	800121a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001152:	4b4c      	ldr	r3, [pc, #304]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115e:	4b49      	ldr	r3, [pc, #292]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d11c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x18c>
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x176>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1c0      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4939      	ldr	r1, [pc, #228]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	e03a      	b.n	800121a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ac:	4b36      	ldr	r3, [pc, #216]	; (8001288 <HAL_RCC_OscConfig+0x270>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc7f 	bl	8000ab4 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fc7b 	bl	8000ab4 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e1a1      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4927      	ldr	r1, [pc, #156]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_RCC_OscConfig+0x270>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc5e 	bl	8000ab4 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc5a 	bl	8000ab4 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e180      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d03a      	beq.n	800129c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d019      	beq.n	8001262 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_RCC_OscConfig+0x274>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001234:	f7ff fc3e 	bl	8000ab4 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fc3a 	bl	8000ab4 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e160      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_RCC_OscConfig+0x26c>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800125a:	2001      	movs	r0, #1
 800125c:	f000 fade 	bl	800181c <RCC_Delay>
 8001260:	e01c      	b.n	800129c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_RCC_OscConfig+0x274>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fc24 	bl	8000ab4 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126e:	e00f      	b.n	8001290 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fc20 	bl	8000ab4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d908      	bls.n	8001290 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e146      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	42420000 	.word	0x42420000
 800128c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	4b92      	ldr	r3, [pc, #584]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1e9      	bne.n	8001270 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80a6 	beq.w	80013f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a87      	ldr	r2, [pc, #540]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b85      	ldr	r3, [pc, #532]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d2:	2301      	movs	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d118      	bne.n	8001314 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012e2:	4b7f      	ldr	r3, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a7e      	ldr	r2, [pc, #504]	; (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fbe1 	bl	8000ab4 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f6:	f7ff fbdd 	bl	8000ab4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b64      	cmp	r3, #100	; 0x64
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e103      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x4c8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <HAL_RCC_OscConfig+0x312>
 800131c:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a6e      	ldr	r2, [pc, #440]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	e02d      	b.n	8001386 <HAL_RCC_OscConfig+0x36e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0x334>
 8001332:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a69      	ldr	r2, [pc, #420]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4a66      	ldr	r2, [pc, #408]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f023 0304 	bic.w	r3, r3, #4
 8001348:	6213      	str	r3, [r2, #32]
 800134a:	e01c      	b.n	8001386 <HAL_RCC_OscConfig+0x36e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x356>
 8001354:	4b61      	ldr	r3, [pc, #388]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a60      	ldr	r2, [pc, #384]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	4b5e      	ldr	r3, [pc, #376]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	4a5d      	ldr	r2, [pc, #372]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6213      	str	r3, [r2, #32]
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0x36e>
 800136e:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6213      	str	r3, [r2, #32]
 800137a:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4a57      	ldr	r2, [pc, #348]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d015      	beq.n	80013ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fb91 	bl	8000ab4 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fb8d 	bl	8000ab4 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0b1      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <HAL_RCC_OscConfig+0x37e>
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fb7b 	bl	8000ab4 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fb77 	bl	8000ab4 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e09b      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a3b      	ldr	r2, [pc, #236]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d061      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d146      	bne.n	80014a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <HAL_RCC_OscConfig+0x4cc>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb4b 	bl	8000ab4 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fb47 	bl	8000ab4 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e06d      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001448:	d108      	bne.n	800145c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	4921      	ldr	r1, [pc, #132]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a19      	ldr	r1, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	430b      	orrs	r3, r1
 800146e:	491b      	ldr	r1, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x4cc>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb1b 	bl	8000ab4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb17 	bl	8000ab4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e03d      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x46a>
 80014a0:	e035      	b.n	800150e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_RCC_OscConfig+0x4cc>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb04 	bl	8000ab4 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb00 	bl	8000ab4 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e026      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x498>
 80014ce:	e01e      	b.n	800150e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e019      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x500>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000

0800151c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0d0      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d910      	bls.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 0207 	bic.w	r2, r3, #7
 8001546:	4965      	ldr	r1, [pc, #404]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0b8      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001582:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800159a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	494d      	ldr	r1, [pc, #308]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d040      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e073      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06b      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4936      	ldr	r1, [pc, #216]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff fa52 	bl	8000ab4 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff fa4e 	bl	8000ab4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e053      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d210      	bcs.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 0207 	bic.w	r2, r3, #7
 8001652:	4922      	ldr	r1, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e032      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4916      	ldr	r1, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016aa:	f000 f859 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	490a      	ldr	r1, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	5ccb      	ldrb	r3, [r1, r3]
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1cc>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f9b0 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080026d8 	.word	0x080026d8
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_RCC_MCOConfig+0x68>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_RCC_MCOConfig+0x68>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_MCOConfig+0x68>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	4619      	mov	r1, r3
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <HAL_RCC_MCOConfig+0x6c>)
 800173c:	f7ff faa8 	bl	8000c90 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_MCOConfig+0x68>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001748:	4903      	ldr	r1, [pc, #12]	; (8001758 <HAL_RCC_MCOConfig+0x68>)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800

08001760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b490      	push	{r4, r7}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <HAL_RCC_GetSysClockFreq+0xac>)
 8001768:	1d3c      	adds	r4, r7, #4
 800176a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001770:	f240 2301 	movw	r3, #513	; 0x201
 8001774:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb0>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b04      	cmp	r3, #4
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 800179a:	2b08      	cmp	r3, #8
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x46>
 800179e:	e02b      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017a2:	623b      	str	r3, [r7, #32]
      break;
 80017a4:	e02b      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	0c9b      	lsrs	r3, r3, #18
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3328      	adds	r3, #40	; 0x28
 80017b0:	443b      	add	r3, r7
 80017b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d012      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0c5b      	lsrs	r3, r3, #17
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	3328      	adds	r3, #40	; 0x28
 80017ce:	443b      	add	r3, r7
 80017d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017da:	fb03 f202 	mul.w	r2, r3, r2
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e004      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	623b      	str	r3, [r7, #32]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017fa:	623b      	str	r3, [r7, #32]
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bc90      	pop	{r4, r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	080026c8 	.word	0x080026c8
 8001810:	40021000 	.word	0x40021000
 8001814:	007a1200 	.word	0x007a1200
 8001818:	003d0900 	.word	0x003d0900

0800181c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <RCC_Delay+0x34>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <RCC_Delay+0x38>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0a5b      	lsrs	r3, r3, #9
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001838:	bf00      	nop
  }
  while (Delay --);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1e5a      	subs	r2, r3, #1
 800183e:	60fa      	str	r2, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f9      	bne.n	8001838 <RCC_Delay+0x1c>
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000000 	.word	0x20000000
 8001854:	10624dd3 	.word	0x10624dd3

08001858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e041      	b.n	80018ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7fe ffc8 	bl	8000814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f000 fb04 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e041      	b.n	800198c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f839 	bl	8001994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	4619      	mov	r1, r3
 8001934:	4610      	mov	r0, r2
 8001936:	f000 fab5 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_TIM_PWM_Start+0x24>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e022      	b.n	8001a12 <HAL_TIM_PWM_Start+0x6a>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d109      	bne.n	80019e6 <HAL_TIM_PWM_Start+0x3e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	e015      	b.n	8001a12 <HAL_TIM_PWM_Start+0x6a>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d109      	bne.n	8001a00 <HAL_TIM_PWM_Start+0x58>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e008      	b.n	8001a12 <HAL_TIM_PWM_Start+0x6a>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e072      	b.n	8001b00 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d104      	bne.n	8001a2a <HAL_TIM_PWM_Start+0x82>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a28:	e013      	b.n	8001a52 <HAL_TIM_PWM_Start+0xaa>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d104      	bne.n	8001a3a <HAL_TIM_PWM_Start+0x92>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a38:	e00b      	b.n	8001a52 <HAL_TIM_PWM_Start+0xaa>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d104      	bne.n	8001a4a <HAL_TIM_PWM_Start+0xa2>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a48:	e003      	b.n	8001a52 <HAL_TIM_PWM_Start+0xaa>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fd6c 	bl	8002538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a28      	ldr	r2, [pc, #160]	; (8001b08 <HAL_TIM_PWM_Start+0x160>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d004      	beq.n	8001a74 <HAL_TIM_PWM_Start+0xcc>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_TIM_PWM_Start+0x164>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_TIM_PWM_Start+0xd0>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <HAL_TIM_PWM_Start+0xd2>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_TIM_PWM_Start+0x160>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d018      	beq.n	8001aca <HAL_TIM_PWM_Start+0x122>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_TIM_PWM_Start+0x164>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_TIM_PWM_Start+0x122>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d00e      	beq.n	8001aca <HAL_TIM_PWM_Start+0x122>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_TIM_PWM_Start+0x168>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_TIM_PWM_Start+0x122>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a16      	ldr	r2, [pc, #88]	; (8001b14 <HAL_TIM_PWM_Start+0x16c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <HAL_TIM_PWM_Start+0x122>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_TIM_PWM_Start+0x170>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d111      	bne.n	8001aee <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d010      	beq.n	8001afe <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	e007      	b.n	8001afe <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40013400 	.word	0x40013400
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800
 8001b18:	40000c00 	.word	0x40000c00

08001b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e0ac      	b.n	8001c90 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0c      	cmp	r3, #12
 8001b42:	f200 809f 	bhi.w	8001c84 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001b81 	.word	0x08001b81
 8001b50:	08001c85 	.word	0x08001c85
 8001b54:	08001c85 	.word	0x08001c85
 8001b58:	08001c85 	.word	0x08001c85
 8001b5c:	08001bc1 	.word	0x08001bc1
 8001b60:	08001c85 	.word	0x08001c85
 8001b64:	08001c85 	.word	0x08001c85
 8001b68:	08001c85 	.word	0x08001c85
 8001b6c:	08001c03 	.word	0x08001c03
 8001b70:	08001c85 	.word	0x08001c85
 8001b74:	08001c85 	.word	0x08001c85
 8001b78:	08001c85 	.word	0x08001c85
 8001b7c:	08001c43 	.word	0x08001c43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 fa06 	bl	8001f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0208 	orr.w	r2, r2, #8
 8001b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6999      	ldr	r1, [r3, #24]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	619a      	str	r2, [r3, #24]
      break;
 8001bbe:	e062      	b.n	8001c86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fa56 	bl	8002078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6999      	ldr	r1, [r3, #24]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	021a      	lsls	r2, r3, #8
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
      break;
 8001c00:	e041      	b.n	8001c86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 faa9 	bl	8002160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69da      	ldr	r2, [r3, #28]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0208 	orr.w	r2, r2, #8
 8001c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0204 	bic.w	r2, r2, #4
 8001c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69d9      	ldr	r1, [r3, #28]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	61da      	str	r2, [r3, #28]
      break;
 8001c40:	e021      	b.n	8001c86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fafd 	bl	8002248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69da      	ldr	r2, [r3, #28]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69d9      	ldr	r1, [r3, #28]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	021a      	lsls	r2, r3, #8
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	61da      	str	r2, [r3, #28]
      break;
 8001c82:	e000      	b.n	8001c86 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_TIM_ConfigClockSource+0x18>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e0b3      	b.n	8001e18 <HAL_TIM_ConfigClockSource+0x180>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce8:	d03e      	beq.n	8001d68 <HAL_TIM_ConfigClockSource+0xd0>
 8001cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cee:	f200 8087 	bhi.w	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf6:	f000 8085 	beq.w	8001e04 <HAL_TIM_ConfigClockSource+0x16c>
 8001cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfe:	d87f      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d00:	2b70      	cmp	r3, #112	; 0x70
 8001d02:	d01a      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0xa2>
 8001d04:	2b70      	cmp	r3, #112	; 0x70
 8001d06:	d87b      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d08:	2b60      	cmp	r3, #96	; 0x60
 8001d0a:	d050      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0x116>
 8001d0c:	2b60      	cmp	r3, #96	; 0x60
 8001d0e:	d877      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d10:	2b50      	cmp	r3, #80	; 0x50
 8001d12:	d03c      	beq.n	8001d8e <HAL_TIM_ConfigClockSource+0xf6>
 8001d14:	2b50      	cmp	r3, #80	; 0x50
 8001d16:	d873      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d058      	beq.n	8001dce <HAL_TIM_ConfigClockSource+0x136>
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d86f      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d20:	2b30      	cmp	r3, #48	; 0x30
 8001d22:	d064      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x156>
 8001d24:	2b30      	cmp	r3, #48	; 0x30
 8001d26:	d86b      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d060      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x156>
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d867      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d05c      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x156>
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d05a      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d38:	e062      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f000 fbd6 	bl	80024fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	609a      	str	r2, [r3, #8]
      break;
 8001d66:	e04e      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f000 fbbf 	bl	80024fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d8a:	609a      	str	r2, [r3, #8]
      break;
 8001d8c:	e03b      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f000 fb36 	bl	800240c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2150      	movs	r1, #80	; 0x50
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fb8d 	bl	80024c6 <TIM_ITRx_SetConfig>
      break;
 8001dac:	e02b      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f000 fb54 	bl	8002468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2160      	movs	r1, #96	; 0x60
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 fb7d 	bl	80024c6 <TIM_ITRx_SetConfig>
      break;
 8001dcc:	e01b      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f000 fb16 	bl	800240c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2140      	movs	r1, #64	; 0x40
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 fb6d 	bl	80024c6 <TIM_ITRx_SetConfig>
      break;
 8001dec:	e00b      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f000 fb64 	bl	80024c6 <TIM_ITRx_SetConfig>
        break;
 8001dfe:	e002      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e00:	bf00      	nop
 8001e02:	e000      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001e04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e031      	b.n	8001e9c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001e48:	6839      	ldr	r1, [r7, #0]
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fa50 	bl	80022f0 <TIM_SlaveTimer_SetConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e018      	b.n	8001e9c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e78:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e88:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a33      	ldr	r2, [pc, #204]	; (8001f84 <TIM_Base_SetConfig+0xe0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <TIM_Base_SetConfig+0xe4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00f      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eca:	d00b      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <TIM_Base_SetConfig+0xe8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <TIM_Base_SetConfig+0xec>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <TIM_Base_SetConfig+0xf0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <TIM_Base_SetConfig+0xe0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d013      	beq.n	8001f26 <TIM_Base_SetConfig+0x82>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <TIM_Base_SetConfig+0xe4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00f      	beq.n	8001f26 <TIM_Base_SetConfig+0x82>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0c:	d00b      	beq.n	8001f26 <TIM_Base_SetConfig+0x82>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <TIM_Base_SetConfig+0xe8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <TIM_Base_SetConfig+0x82>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <TIM_Base_SetConfig+0xec>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <TIM_Base_SetConfig+0x82>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <TIM_Base_SetConfig+0xf0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d108      	bne.n	8001f38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <TIM_Base_SetConfig+0xe0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <TIM_Base_SetConfig+0xc8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <TIM_Base_SetConfig+0xe4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d103      	bne.n	8001f74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40013400 	.word	0x40013400
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00

08001f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	f023 0201 	bic.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f023 0302 	bic.w	r3, r3, #2
 8001fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <TIM_OC1_SetConfig+0xd8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <TIM_OC1_SetConfig+0x64>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <TIM_OC1_SetConfig+0xdc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d10c      	bne.n	8002016 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f023 0308 	bic.w	r3, r3, #8
 8002002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f023 0304 	bic.w	r3, r3, #4
 8002014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a15      	ldr	r2, [pc, #84]	; (8002070 <TIM_OC1_SetConfig+0xd8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <TIM_OC1_SetConfig+0x8e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <TIM_OC1_SetConfig+0xdc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d111      	bne.n	800204a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800202c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	621a      	str	r2, [r3, #32]
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40013400 	.word	0x40013400

08002078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f023 0210 	bic.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f023 0320 	bic.w	r3, r3, #32
 80020c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a21      	ldr	r2, [pc, #132]	; (8002158 <TIM_OC2_SetConfig+0xe0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_OC2_SetConfig+0x68>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a20      	ldr	r2, [pc, #128]	; (800215c <TIM_OC2_SetConfig+0xe4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10d      	bne.n	80020fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <TIM_OC2_SetConfig+0xe0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <TIM_OC2_SetConfig+0x94>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <TIM_OC2_SetConfig+0xe4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d113      	bne.n	8002134 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800211a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	621a      	str	r2, [r3, #32]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40013400 	.word	0x40013400

08002160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a21      	ldr	r2, [pc, #132]	; (8002240 <TIM_OC3_SetConfig+0xe0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d003      	beq.n	80021c6 <TIM_OC3_SetConfig+0x66>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a20      	ldr	r2, [pc, #128]	; (8002244 <TIM_OC3_SetConfig+0xe4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10d      	bne.n	80021e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <TIM_OC3_SetConfig+0xe0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_OC3_SetConfig+0x92>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <TIM_OC3_SetConfig+0xe4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d113      	bne.n	800221a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	621a      	str	r2, [r3, #32]
}
 8002234:	bf00      	nop
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40013400 	.word	0x40013400

08002248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	031b      	lsls	r3, r3, #12
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <TIM_OC4_SetConfig+0xa0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_OC4_SetConfig+0x68>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <TIM_OC4_SetConfig+0xa4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d109      	bne.n	80022c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	621a      	str	r2, [r3, #32]
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40013400 	.word	0x40013400

080022f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002308:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f023 0307 	bic.w	r3, r3, #7
 800231a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b70      	cmp	r3, #112	; 0x70
 8002334:	d01a      	beq.n	800236c <TIM_SlaveTimer_SetConfig+0x7c>
 8002336:	2b70      	cmp	r3, #112	; 0x70
 8002338:	d860      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
 800233a:	2b60      	cmp	r3, #96	; 0x60
 800233c:	d054      	beq.n	80023e8 <TIM_SlaveTimer_SetConfig+0xf8>
 800233e:	2b60      	cmp	r3, #96	; 0x60
 8002340:	d85c      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
 8002342:	2b50      	cmp	r3, #80	; 0x50
 8002344:	d046      	beq.n	80023d4 <TIM_SlaveTimer_SetConfig+0xe4>
 8002346:	2b50      	cmp	r3, #80	; 0x50
 8002348:	d858      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d019      	beq.n	8002382 <TIM_SlaveTimer_SetConfig+0x92>
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d854      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
 8002352:	2b30      	cmp	r3, #48	; 0x30
 8002354:	d054      	beq.n	8002400 <TIM_SlaveTimer_SetConfig+0x110>
 8002356:	2b30      	cmp	r3, #48	; 0x30
 8002358:	d850      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
 800235a:	2b20      	cmp	r3, #32
 800235c:	d050      	beq.n	8002400 <TIM_SlaveTimer_SetConfig+0x110>
 800235e:	2b20      	cmp	r3, #32
 8002360:	d84c      	bhi.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d04c      	beq.n	8002400 <TIM_SlaveTimer_SetConfig+0x110>
 8002366:	2b10      	cmp	r3, #16
 8002368:	d04a      	beq.n	8002400 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800236a:	e047      	b.n	80023fc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68d9      	ldr	r1, [r3, #12]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f000 f8bd 	bl	80024fa <TIM_ETR_SetConfig>
      break;
 8002380:	e03f      	b.n	8002402 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d101      	bne.n	800238e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e03a      	b.n	8002404 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	621a      	str	r2, [r3, #32]
      break;
 80023d2:	e016      	b.n	8002402 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f000 f813 	bl	800240c <TIM_TI1_ConfigInputStage>
      break;
 80023e6:	e00c      	b.n	8002402 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f000 f837 	bl	8002468 <TIM_TI2_ConfigInputStage>
      break;
 80023fa:	e002      	b.n	8002402 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002400:	bf00      	nop
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f023 0201 	bic.w	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f023 030a 	bic.w	r3, r3, #10
 8002448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	621a      	str	r2, [r3, #32]
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f023 0210 	bic.w	r2, r3, #16
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002492:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	031b      	lsls	r3, r3, #12
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	621a      	str	r2, [r3, #32]
}
 80024bc:	bf00      	nop
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f043 0307 	orr.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002514:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	021a      	lsls	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	431a      	orrs	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	4313      	orrs	r3, r2
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	609a      	str	r2, [r3, #8]
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2201      	movs	r2, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a1a      	ldr	r2, [r3, #32]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002594:	2302      	movs	r3, #2
 8002596:	e050      	b.n	800263a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d018      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d00e      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10c      	bne.n	8002628 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4313      	orrs	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00
 8002648:	40013400 	.word	0x40013400
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00

08002658 <__libc_init_array>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	2600      	movs	r6, #0
 800265c:	4d0c      	ldr	r5, [pc, #48]	; (8002690 <__libc_init_array+0x38>)
 800265e:	4c0d      	ldr	r4, [pc, #52]	; (8002694 <__libc_init_array+0x3c>)
 8002660:	1b64      	subs	r4, r4, r5
 8002662:	10a4      	asrs	r4, r4, #2
 8002664:	42a6      	cmp	r6, r4
 8002666:	d109      	bne.n	800267c <__libc_init_array+0x24>
 8002668:	f000 f822 	bl	80026b0 <_init>
 800266c:	2600      	movs	r6, #0
 800266e:	4d0a      	ldr	r5, [pc, #40]	; (8002698 <__libc_init_array+0x40>)
 8002670:	4c0a      	ldr	r4, [pc, #40]	; (800269c <__libc_init_array+0x44>)
 8002672:	1b64      	subs	r4, r4, r5
 8002674:	10a4      	asrs	r4, r4, #2
 8002676:	42a6      	cmp	r6, r4
 8002678:	d105      	bne.n	8002686 <__libc_init_array+0x2e>
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002680:	4798      	blx	r3
 8002682:	3601      	adds	r6, #1
 8002684:	e7ee      	b.n	8002664 <__libc_init_array+0xc>
 8002686:	f855 3b04 	ldr.w	r3, [r5], #4
 800268a:	4798      	blx	r3
 800268c:	3601      	adds	r6, #1
 800268e:	e7f2      	b.n	8002676 <__libc_init_array+0x1e>
 8002690:	080026e8 	.word	0x080026e8
 8002694:	080026e8 	.word	0x080026e8
 8002698:	080026e8 	.word	0x080026e8
 800269c:	080026ec 	.word	0x080026ec

080026a0 <memset>:
 80026a0:	4603      	mov	r3, r0
 80026a2:	4402      	add	r2, r0
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d100      	bne.n	80026aa <memset+0xa>
 80026a8:	4770      	bx	lr
 80026aa:	f803 1b01 	strb.w	r1, [r3], #1
 80026ae:	e7f9      	b.n	80026a4 <memset+0x4>

080026b0 <_init>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr

080026bc <_fini>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr
