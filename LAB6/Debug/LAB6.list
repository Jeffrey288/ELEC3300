
LAB6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08004870  08004870  00014870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f80  08004f80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f80  08004f80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08004ff8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004ff8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000895d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190f  00000000  00000000  000289f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019553  00000000  00000000  0002b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac1a  00000000  00000000  00044993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936e7  00000000  00000000  0004f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000e2ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08004854 	.word	0x08004854

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08004854 	.word	0x08004854

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	e002      	b.n	8000b24 <Delay+0x10>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f9      	bne.n	8000b1e <Delay+0xa>
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 f829 	bl	8000b94 <LCD_BackLed_Control>
	LCD_Rst();
 8000b42:	f000 f80f 	bl	8000b64 <LCD_Rst>
	LCD_REG_Config();
 8000b46:	f000 f85f 	bl	8000c08 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b54:	22f0      	movs	r2, #240	; 0xf0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 f9e6 	bl	8000f2a <LCD_Clear>
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	4807      	ldr	r0, [pc, #28]	; (8000b8c <LCD_Rst+0x28>)
 8000b6e:	f001 fa1e 	bl	8001fae <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <LCD_Rst+0x2c>)
 8000b74:	f7ff ffce 	bl	8000b14 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <LCD_Rst+0x28>)
 8000b7e:	f001 fa16 	bl	8001fae <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <LCD_Rst+0x2c>)
 8000b84:	f7ff ffc6 	bl	8000b14 <Delay>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40011800 	.word	0x40011800
 8000b90:	0002bffc 	.word	0x0002bffc

08000b94 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <LCD_BackLed_Control+0x34>)
 8000bac:	f001 f9ff 	bl	8001fae <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000bb0:	e005      	b.n	8000bbe <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <LCD_BackLed_Control+0x34>)
 8000bba:	f001 f9f8 	bl	8001fae <HAL_GPIO_WritePin>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40011400 	.word	0x40011400

08000bcc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000bd6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	8013      	strh	r3, [r2, #0]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <LCD_Write_Data+0x1c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	8013      	strh	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	60020000 	.word	0x60020000

08000c08 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c0c:	20cf      	movs	r0, #207	; 0xcf
 8000c0e:	f7ff ffdd 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff ffe8 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c18:	2081      	movs	r0, #129	; 0x81
 8000c1a:	f7ff ffe5 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c1e:	2030      	movs	r0, #48	; 0x30
 8000c20:	f7ff ffe2 	bl	8000be8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c24:	20ed      	movs	r0, #237	; 0xed
 8000c26:	f7ff ffd1 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c2a:	2064      	movs	r0, #100	; 0x64
 8000c2c:	f7ff ffdc 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c30:	2003      	movs	r0, #3
 8000c32:	f7ff ffd9 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c36:	2012      	movs	r0, #18
 8000c38:	f7ff ffd6 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c3c:	2081      	movs	r0, #129	; 0x81
 8000c3e:	f7ff ffd3 	bl	8000be8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c42:	20e8      	movs	r0, #232	; 0xe8
 8000c44:	f7ff ffc2 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c48:	2085      	movs	r0, #133	; 0x85
 8000c4a:	f7ff ffcd 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c4e:	2010      	movs	r0, #16
 8000c50:	f7ff ffca 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000c54:	2078      	movs	r0, #120	; 0x78
 8000c56:	f7ff ffc7 	bl	8000be8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000c5a:	20cb      	movs	r0, #203	; 0xcb
 8000c5c:	f7ff ffb6 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000c60:	2039      	movs	r0, #57	; 0x39
 8000c62:	f7ff ffc1 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000c66:	202c      	movs	r0, #44	; 0x2c
 8000c68:	f7ff ffbe 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ffbb 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000c72:	2034      	movs	r0, #52	; 0x34
 8000c74:	f7ff ffb8 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff ffb5 	bl	8000be8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000c7e:	20f7      	movs	r0, #247	; 0xf7
 8000c80:	f7ff ffa4 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000c84:	2020      	movs	r0, #32
 8000c86:	f7ff ffaf 	bl	8000be8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000c8a:	20ea      	movs	r0, #234	; 0xea
 8000c8c:	f7ff ff9e 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff ffa9 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff ffa6 	bl	8000be8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000c9c:	20b1      	movs	r0, #177	; 0xb1
 8000c9e:	f7ff ff95 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff ffa0 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000ca8:	201b      	movs	r0, #27
 8000caa:	f7ff ff9d 	bl	8000be8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cae:	20b6      	movs	r0, #182	; 0xb6
 8000cb0:	f7ff ff8c 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f7ff ff97 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000cba:	20a2      	movs	r0, #162	; 0xa2
 8000cbc:	f7ff ff94 	bl	8000be8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000cc0:	20c0      	movs	r0, #192	; 0xc0
 8000cc2:	f7ff ff83 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000cc6:	2035      	movs	r0, #53	; 0x35
 8000cc8:	f7ff ff8e 	bl	8000be8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000ccc:	20c1      	movs	r0, #193	; 0xc1
 8000cce:	f7ff ff7d 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000cd2:	2011      	movs	r0, #17
 8000cd4:	f7ff ff88 	bl	8000be8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000cd8:	20c5      	movs	r0, #197	; 0xc5
 8000cda:	f7ff ff77 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000cde:	2045      	movs	r0, #69	; 0x45
 8000ce0:	f7ff ff82 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000ce4:	2045      	movs	r0, #69	; 0x45
 8000ce6:	f7ff ff7f 	bl	8000be8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000cea:	20c7      	movs	r0, #199	; 0xc7
 8000cec:	f7ff ff6e 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000cf0:	20a2      	movs	r0, #162	; 0xa2
 8000cf2:	f7ff ff79 	bl	8000be8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000cf6:	20f2      	movs	r0, #242	; 0xf2
 8000cf8:	f7ff ff68 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff ff73 	bl	8000be8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d02:	2026      	movs	r0, #38	; 0x26
 8000d04:	f7ff ff62 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff6d 	bl	8000be8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d0e:	20e0      	movs	r0, #224	; 0xe0
 8000d10:	f7ff ff5c 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d14:	200f      	movs	r0, #15
 8000d16:	f7ff ff67 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d1a:	2026      	movs	r0, #38	; 0x26
 8000d1c:	f7ff ff64 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d20:	2024      	movs	r0, #36	; 0x24
 8000d22:	f7ff ff61 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d26:	200b      	movs	r0, #11
 8000d28:	f7ff ff5e 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d2c:	200e      	movs	r0, #14
 8000d2e:	f7ff ff5b 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d32:	2009      	movs	r0, #9
 8000d34:	f7ff ff58 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d38:	2054      	movs	r0, #84	; 0x54
 8000d3a:	f7ff ff55 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d3e:	20a8      	movs	r0, #168	; 0xa8
 8000d40:	f7ff ff52 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d44:	2046      	movs	r0, #70	; 0x46
 8000d46:	f7ff ff4f 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d4a:	200c      	movs	r0, #12
 8000d4c:	f7ff ff4c 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000d50:	2017      	movs	r0, #23
 8000d52:	f7ff ff49 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d56:	2009      	movs	r0, #9
 8000d58:	f7ff ff46 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000d5c:	200f      	movs	r0, #15
 8000d5e:	f7ff ff43 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000d62:	2007      	movs	r0, #7
 8000d64:	f7ff ff40 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ff3d 	bl	8000be8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000d6e:	20e1      	movs	r0, #225	; 0xe1
 8000d70:	f7ff ff2c 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ff37 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000d7a:	2019      	movs	r0, #25
 8000d7c:	f7ff ff34 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000d80:	201b      	movs	r0, #27
 8000d82:	f7ff ff31 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000d86:	2004      	movs	r0, #4
 8000d88:	f7ff ff2e 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000d8c:	2010      	movs	r0, #16
 8000d8e:	f7ff ff2b 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000d92:	2007      	movs	r0, #7
 8000d94:	f7ff ff28 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000d98:	202a      	movs	r0, #42	; 0x2a
 8000d9a:	f7ff ff25 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000d9e:	2047      	movs	r0, #71	; 0x47
 8000da0:	f7ff ff22 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000da4:	2039      	movs	r0, #57	; 0x39
 8000da6:	f7ff ff1f 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff ff1c 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000db0:	2006      	movs	r0, #6
 8000db2:	f7ff ff19 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000db6:	2006      	movs	r0, #6
 8000db8:	f7ff ff16 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000dbc:	2030      	movs	r0, #48	; 0x30
 8000dbe:	f7ff ff13 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000dc2:	2038      	movs	r0, #56	; 0x38
 8000dc4:	f7ff ff10 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000dc8:	200f      	movs	r0, #15
 8000dca:	f7ff ff0d 	bl	8000be8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000dce:	2036      	movs	r0, #54	; 0x36
 8000dd0:	f7ff fefc 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );    
 8000dd4:	20c8      	movs	r0, #200	; 0xc8
 8000dd6:	f7ff ff07 	bl	8000be8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000dda:	202a      	movs	r0, #42	; 0x2a
 8000ddc:	f7ff fef6 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ff01 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fefe 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fefb 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000df2:	20ef      	movs	r0, #239	; 0xef
 8000df4:	f7ff fef8 	bl	8000be8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000df8:	202b      	movs	r0, #43	; 0x2b
 8000dfa:	f7ff fee7 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fef2 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff feef 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff feec 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e10:	203f      	movs	r0, #63	; 0x3f
 8000e12:	f7ff fee9 	bl	8000be8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e16:	203a      	movs	r0, #58	; 0x3a
 8000e18:	f7ff fed8 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e1c:	2055      	movs	r0, #85	; 0x55
 8000e1e:	f7ff fee3 	bl	8000be8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e22:	2011      	movs	r0, #17
 8000e24:	f7ff fed2 	bl	8000bcc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <LCD_REG_Config+0x230>)
 8000e2a:	f7ff fe73 	bl	8000b14 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e2e:	2029      	movs	r0, #41	; 0x29
 8000e30:	f7ff fecc 	bl	8000bcc <LCD_Write_Cmd>
	
	
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	0002bffc 	.word	0x0002bffc

08000e3c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000e5a:	202a      	movs	r0, #42	; 0x2a
 8000e5c:	f7ff feb6 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff febe 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff feb8 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	121b      	asrs	r3, r3, #8
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff feaf 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	4413      	add	r3, r2
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	3b01      	subs	r3, #1
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fea4 	bl	8000be8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000ea0:	202b      	movs	r0, #43	; 0x2b
 8000ea2:	f7ff fe93 	bl	8000bcc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe9b 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe95 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000ebe:	88ba      	ldrh	r2, [r7, #4]
 8000ec0:	883b      	ldrh	r3, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	121b      	asrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe8c 	bl	8000be8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000ed0:	88ba      	ldrh	r2, [r7, #4]
 8000ed2:	883b      	ldrh	r3, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fe81 	bl	8000be8 <LCD_Write_Data>
	
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd90      	pop	{r4, r7, pc}

08000eee <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000efe:	202c      	movs	r0, #44	; 0x2c
 8000f00:	f7ff fe64 	bl	8000bcc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e006      	b.n	8000f18 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe6b 	bl	8000be8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d3f4      	bcc.n	8000f0a <LCD_FillColor+0x1c>
		
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f2a:	b590      	push	{r4, r7, lr}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4604      	mov	r4, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4611      	mov	r1, r2
 8000f36:	461a      	mov	r2, r3
 8000f38:	4623      	mov	r3, r4
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	80bb      	strh	r3, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	88b9      	ldrh	r1, [r7, #4]
 8000f4e:	88f8      	ldrh	r0, [r7, #6]
 8000f50:	f7ff ff74 	bl	8000e3c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	883a      	ldrh	r2, [r7, #0]
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	8b3b      	ldrh	r3, [r7, #24]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f7ff ffc3 	bl	8000eee <LCD_FillColor>
	
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	3b20      	subs	r3, #32
 8000f86:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000f88:	88b9      	ldrh	r1, [r7, #4]
 8000f8a:	88f8      	ldrh	r0, [r7, #6]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	2208      	movs	r2, #8
 8000f90:	f7ff ff54 	bl	8000e3c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f94:	202c      	movs	r0, #44	; 0x2c
 8000f96:	f7ff fe19 	bl	8000bcc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73bb      	strb	r3, [r7, #14]
 8000f9e:	e023      	b.n	8000fe8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000fa0:	7b3a      	ldrb	r2, [r7, #12]
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	4914      	ldr	r1, [pc, #80]	; (8000ff8 <LCD_DrawChar+0x88>)
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	440a      	add	r2, r1
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
 8000fb4:	e012      	b.n	8000fdc <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8000fc0:	201f      	movs	r0, #31
 8000fc2:	f7ff fe11 	bl	8000be8 <LCD_Write_Data>
 8000fc6:	e003      	b.n	8000fd0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8000fc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000fcc:	f7ff fe0c 	bl	8000be8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000fd6:	7b7b      	ldrb	r3, [r7, #13]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	737b      	strb	r3, [r7, #13]
 8000fdc:	7b7b      	ldrb	r3, [r7, #13]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	d9e9      	bls.n	8000fb6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73bb      	strb	r3, [r7, #14]
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d9d8      	bls.n	8000fa0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	0800488c 	.word	0x0800488c

08000ffc <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	603a      	str	r2, [r7, #0]
 8001006:	80fb      	strh	r3, [r7, #6]
 8001008:	460b      	mov	r3, r1
 800100a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800100c:	e01c      	b.n	8001048 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	2be8      	cmp	r3, #232	; 0xe8
 8001012:	d904      	bls.n	800101e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001014:	2300      	movs	r3, #0
 8001016:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	3310      	adds	r3, #16
 800101c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001024:	d903      	bls.n	800102e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001026:	2300      	movs	r3, #0
 8001028:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800102a:	2300      	movs	r3, #0
 800102c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	88b9      	ldrh	r1, [r7, #4]
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff9a 	bl	8000f70 <LCD_DrawChar>
		
		pStr ++;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	3308      	adds	r3, #8
 8001046:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1de      	bne.n	800100e <LCD_DrawString+0x12>
		
	}
	
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b0a6      	sub	sp, #152	; 0x98
 8001060:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 fc8f 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f989 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 f9fb 	bl	8001464 <MX_GPIO_Init>
  MX_FSMC_Init();
 800106e:	f000 fad5 	bl	800161c <MX_FSMC_Init>
  MX_I2C2_Init();
 8001072:	f000 f9c9 	bl	8001408 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001076:	f7ff fd5e 	bl	8000b36 <LCD_INIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_tick = HAL_GetTick();
 800107a:	f000 fcdb 	bl	8001a34 <HAL_GetTick>
 800107e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  uint32_t prev_SR = 0, prev_LR = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001086:	2300      	movs	r3, #0
 8001088:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t now_SR = 0, now_LR = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	677b      	str	r3, [r7, #116]	; 0x74
 800108e:	2300      	movs	r3, #0
 8001090:	673b      	str	r3, [r7, #112]	; 0x70
  uint8_t screen_state = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint8_t btn_k2_pressed = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  //	  LCD_Clear(0, 0, 240, 320, BACKGROUND);
  //	  if (HAL_GetTick() - last_tick > 1000) {
  //		  last_tick = HAL_GetTick();
  //	  }

	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 800109e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a2:	48ae      	ldr	r0, [pc, #696]	; (800135c <main+0x300>)
 80010a4:	f000 ff6c 	bl	8001f80 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <main+0x62>
		  if (!btn_k2_pressed) {
 80010ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <main+0x68>
			  btn_k2_pressed = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80010bc:	e002      	b.n	80010c4 <main+0x68>
//			  LCD_Clear(0, 0, 240, 320, BACKGROUND);
//			  if (screen_state == 2)
//				  	 LCD_PrintImage();
		  }
	  } else {
		  btn_k2_pressed = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  // Reading the I2C
#define HCM5883_Addr (0x1E)
//	  HAL_I2C_Mem_Read(&hi2c2, HMC5883_Addr << 1, 0x6C, 1, &angle, 1, 100);

	  // write to CRA the 8-average, 15 Hz
	  temp = 0x70;
 80010c4:	2370      	movs	r3, #112	; 0x70
 80010c6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	  HAL_I2C_Mem_Write(&hi2c2, HCM5883_Addr << 1, 0x00, 1, &temp, 1, 100);
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2200      	movs	r2, #0
 80010dc:	213c      	movs	r1, #60	; 0x3c
 80010de:	48a0      	ldr	r0, [pc, #640]	; (8001360 <main+0x304>)
 80010e0:	f001 f8c2 	bl	8002268 <HAL_I2C_Mem_Write>
	  // write to CRB the gain
	  temp = 0xA0;
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	  HAL_I2C_Mem_Write(&hi2c2, HCM5883_Addr << 1, 0x01, 1, &temp, 1, 100);
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2301      	movs	r3, #1
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2201      	movs	r2, #1
 80010fc:	213c      	movs	r1, #60	; 0x3c
 80010fe:	4898      	ldr	r0, [pc, #608]	; (8001360 <main+0x304>)
 8001100:	f001 f8b2 	bl	8002268 <HAL_I2C_Mem_Write>

	  // For each measurement query:
	  // Write the mode register to read data
	  temp = 0x01;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	  HAL_I2C_Mem_Write(&hi2c2, HCM5883_Addr << 1, 0x02, 1, &temp, 1, 100);
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2301      	movs	r3, #1
 800111a:	2202      	movs	r2, #2
 800111c:	213c      	movs	r1, #60	; 0x3c
 800111e:	4890      	ldr	r0, [pc, #576]	; (8001360 <main+0x304>)
 8001120:	f001 f8a2 	bl	8002268 <HAL_I2C_Mem_Write>
	  // Wait 6 ms or monitor status register or DRDY hardware interrupt pin
	  HAL_Delay(6);
 8001124:	2006      	movs	r0, #6
 8001126:	f000 fc8f 	bl	8001a48 <HAL_Delay>
	  do {
		  HAL_I2C_Mem_Read(&hi2c2, HCM5883_Addr << 1, 0x09, 1, &status, 1, 100);
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2301      	movs	r3, #1
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2209      	movs	r2, #9
 800113c:	213c      	movs	r1, #60	; 0x3c
 800113e:	4888      	ldr	r0, [pc, #544]	; (8001360 <main+0x304>)
 8001140:	f001 f98c 	bl	800245c <HAL_I2C_Mem_Read>
	  } while (status == 0);
 8001144:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0ee      	beq.n	800112a <main+0xce>
			  uint16_t Z;
			  uint16_t Y;
		  };
	  } data;

	  HAL_I2C_Mem_Read(&hi2c2, HCM5883_Addr << 1, 0x03, 6, data.raw, 1, 100);
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2301      	movs	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	463b      	mov	r3, r7
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2306      	movs	r3, #6
 800115a:	2203      	movs	r2, #3
 800115c:	213c      	movs	r1, #60	; 0x3c
 800115e:	4880      	ldr	r0, [pc, #512]	; (8001360 <main+0x304>)
 8001160:	f001 f97c 	bl	800245c <HAL_I2C_Mem_Read>

	  angle = atan2(data.Y, data.X);
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9a0 	bl	80004ac <__aeabi_ui2d>
 800116c:	4604      	mov	r4, r0
 800116e:	460d      	mov	r5, r1
 8001170:	883b      	ldrh	r3, [r7, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f99a 	bl	80004ac <__aeabi_ui2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f003 f904 	bl	800438c <atan2>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fca2 	bl	8000ad4 <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	  sprintf(buff, "Angle: %d", angle);
 8001196:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	4971      	ldr	r1, [pc, #452]	; (8001364 <main+0x308>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fc79 	bl	8003a98 <siprintf>
	  LCD_DrawString(0, 0, buff);
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	461a      	mov	r2, r3
 80011ac:	2100      	movs	r1, #0
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ff24 	bl	8000ffc <LCD_DrawString>
	   * G PA12
	   *
	   *
	   */

	  seven_seg_gpio(angle%10);
 80011b4:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <main+0x30c>)
 80011ba:	fba3 1302 	umull	r1, r3, r3, r2
 80011be:	08d9      	lsrs	r1, r3, #3
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	4a67      	ldr	r2, [pc, #412]	; (800136c <main+0x310>)
 80011d0:	460b      	mov	r3, r1
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf0c      	ite	eq
 80011de:	2301      	moveq	r3, #1
 80011e0:	2300      	movne	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	4861      	ldr	r0, [pc, #388]	; (8001370 <main+0x314>)
 80011ea:	f000 fee0 	bl	8001fae <HAL_GPIO_WritePin>
 80011ee:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <main+0x30c>)
 80011f4:	fba3 1302 	umull	r1, r3, r3, r2
 80011f8:	08d9      	lsrs	r1, r3, #3
 80011fa:	460b      	mov	r3, r1
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <main+0x310>)
 800120a:	460b      	mov	r3, r1
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	4413      	add	r3, r2
 8001212:	3301      	adds	r3, #1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4852      	ldr	r0, [pc, #328]	; (8001370 <main+0x314>)
 8001226:	f000 fec2 	bl	8001fae <HAL_GPIO_WritePin>
 800122a:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800122e:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <main+0x30c>)
 8001230:	fba3 1302 	umull	r1, r3, r3, r2
 8001234:	08d9      	lsrs	r1, r3, #3
 8001236:	460b      	mov	r3, r1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4a49      	ldr	r2, [pc, #292]	; (800136c <main+0x310>)
 8001246:	460b      	mov	r3, r1
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	1a5b      	subs	r3, r3, r1
 800124c:	4413      	add	r3, r2
 800124e:	3302      	adds	r3, #2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf0c      	ite	eq
 8001256:	2301      	moveq	r3, #1
 8001258:	2300      	movne	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	2110      	movs	r1, #16
 8001260:	4843      	ldr	r0, [pc, #268]	; (8001370 <main+0x314>)
 8001262:	f000 fea4 	bl	8001fae <HAL_GPIO_WritePin>
 8001266:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800126a:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <main+0x30c>)
 800126c:	fba3 1302 	umull	r1, r3, r3, r2
 8001270:	08d9      	lsrs	r1, r3, #3
 8001272:	460b      	mov	r3, r1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	4a3a      	ldr	r2, [pc, #232]	; (800136c <main+0x310>)
 8001282:	460b      	mov	r3, r1
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	1a5b      	subs	r3, r3, r1
 8001288:	4413      	add	r3, r2
 800128a:	3303      	adds	r3, #3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129e:	4834      	ldr	r0, [pc, #208]	; (8001370 <main+0x314>)
 80012a0:	f000 fe85 	bl	8001fae <HAL_GPIO_WritePin>
 80012a4:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80012a8:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <main+0x30c>)
 80012aa:	fba3 1302 	umull	r1, r3, r3, r2
 80012ae:	08d9      	lsrs	r1, r3, #3
 80012b0:	460b      	mov	r3, r1
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	440b      	add	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	4a2b      	ldr	r2, [pc, #172]	; (800136c <main+0x310>)
 80012c0:	460b      	mov	r3, r1
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	1a5b      	subs	r3, r3, r1
 80012c6:	4413      	add	r3, r2
 80012c8:	3304      	adds	r3, #4
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	2108      	movs	r1, #8
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <main+0x300>)
 80012dc:	f000 fe67 	bl	8001fae <HAL_GPIO_WritePin>
 80012e0:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <main+0x30c>)
 80012e6:	fba3 1302 	umull	r1, r3, r3, r2
 80012ea:	08d9      	lsrs	r1, r3, #3
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <main+0x310>)
 80012fc:	460b      	mov	r3, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a5b      	subs	r3, r3, r1
 8001302:	4413      	add	r3, r2
 8001304:	3305      	adds	r3, #5
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <main+0x318>)
 8001318:	f000 fe49 	bl	8001fae <HAL_GPIO_WritePin>
 800131c:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <main+0x30c>)
 8001322:	fba3 1302 	umull	r1, r3, r3, r2
 8001326:	08d9      	lsrs	r1, r3, #3
 8001328:	460b      	mov	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4619      	mov	r1, r3
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <main+0x310>)
 8001338:	460b      	mov	r3, r1
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	1a5b      	subs	r3, r3, r1
 800133e:	4413      	add	r3, r2
 8001340:	3306      	adds	r3, #6
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <main+0x31c>)
 8001356:	f000 fe2a 	bl	8001fae <HAL_GPIO_WritePin>
  {
 800135a:	e6a0      	b.n	800109e <main+0x42>
 800135c:	40011000 	.word	0x40011000
 8001360:	2000008c 	.word	0x2000008c
 8001364:	08004870 	.word	0x08004870
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	08004e7c 	.word	0x08004e7c
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40011400 	.word	0x40011400
 8001378:	40010800 	.word	0x40010800

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	; 0x40
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f002 fb7c 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 fe0b 	bl	8002fe0 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013d0:	f000 f988 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	2302      	movs	r3, #2
 80013da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2102      	movs	r1, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 f878 	bl	80034e4 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013fa:	f000 f973 	bl	80016e4 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	; 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C2_Init+0x50>)
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <MX_I2C2_Init+0x54>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C2_Init+0x50>)
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_I2C2_Init+0x58>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_I2C2_Init+0x50>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_I2C2_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_I2C2_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_I2C2_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_I2C2_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_I2C2_Init+0x50>)
 8001446:	f000 fdcb 	bl	8001fe0 <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 f948 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000008c 	.word	0x2000008c
 800145c:	40005800 	.word	0x40005800
 8001460:	000186a0 	.word	0x000186a0

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001478:	4b62      	ldr	r3, [pc, #392]	; (8001604 <MX_GPIO_Init+0x1a0>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a61      	ldr	r2, [pc, #388]	; (8001604 <MX_GPIO_Init+0x1a0>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b5f      	ldr	r3, [pc, #380]	; (8001604 <MX_GPIO_Init+0x1a0>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001490:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <MX_GPIO_Init+0x1a0>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a5b      	ldr	r2, [pc, #364]	; (8001604 <MX_GPIO_Init+0x1a0>)
 8001496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b59      	ldr	r3, [pc, #356]	; (8001604 <MX_GPIO_Init+0x1a0>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014ae:	f043 0308 	orr.w	r3, r3, #8
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	4b50      	ldr	r3, [pc, #320]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	4a49      	ldr	r2, [pc, #292]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	6193      	str	r3, [r2, #24]
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <MX_GPIO_Init+0x1a0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2108      	movs	r1, #8
 80014f4:	4844      	ldr	r0, [pc, #272]	; (8001608 <MX_GPIO_Init+0x1a4>)
 80014f6:	f000 fd5a 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f241 01d0 	movw	r1, #4304	; 0x10d0
 8001500:	4842      	ldr	r0, [pc, #264]	; (800160c <MX_GPIO_Init+0x1a8>)
 8001502:	f000 fd54 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150c:	4840      	ldr	r0, [pc, #256]	; (8001610 <MX_GPIO_Init+0x1ac>)
 800150e:	f000 fd4e 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001518:	483e      	ldr	r0, [pc, #248]	; (8001614 <MX_GPIO_Init+0x1b0>)
 800151a:	f000 fd48 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	2140      	movs	r1, #64	; 0x40
 8001522:	483b      	ldr	r0, [pc, #236]	; (8001610 <MX_GPIO_Init+0x1ac>)
 8001524:	f000 fd43 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	2102      	movs	r1, #2
 800152c:	483a      	ldr	r0, [pc, #232]	; (8001618 <MX_GPIO_Init+0x1b4>)
 800152e:	f000 fd3e 	bl	8001fae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	4619      	mov	r1, r3
 8001546:	4830      	ldr	r0, [pc, #192]	; (8001608 <MX_GPIO_Init+0x1a4>)
 8001548:	f000 fb86 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800154c:	2308      	movs	r3, #8
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4619      	mov	r1, r3
 8001562:	4829      	ldr	r0, [pc, #164]	; (8001608 <MX_GPIO_Init+0x1a4>)
 8001564:	f000 fb78 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001568:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156e:	2301      	movs	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4619      	mov	r1, r3
 8001580:	4822      	ldr	r0, [pc, #136]	; (800160c <MX_GPIO_Init+0x1a8>)
 8001582:	f000 fb69 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	4619      	mov	r1, r3
 800159e:	481c      	ldr	r0, [pc, #112]	; (8001610 <MX_GPIO_Init+0x1ac>)
 80015a0:	f000 fb5a 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4815      	ldr	r0, [pc, #84]	; (8001614 <MX_GPIO_Init+0x1b0>)
 80015be:	f000 fb4b 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c2:	2340      	movs	r3, #64	; 0x40
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d2:	f107 0318 	add.w	r3, r7, #24
 80015d6:	4619      	mov	r1, r3
 80015d8:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_GPIO_Init+0x1ac>)
 80015da:	f000 fb3d 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015de:	2302      	movs	r3, #2
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ee:	f107 0318 	add.w	r3, r7, #24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <MX_GPIO_Init+0x1b4>)
 80015f6:	f000 fb2f 	bl	8001c58 <HAL_GPIO_Init>

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40011000 	.word	0x40011000
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011400 	.word	0x40011400
 8001614:	40010800 	.word	0x40010800
 8001618:	40011800 	.word	0x40011800

0800161c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001636:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800163a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <MX_FSMC_Init+0xbc>)
 800163e:	4a27      	ldr	r2, [pc, #156]	; (80016dc <MX_FSMC_Init+0xc0>)
 8001640:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <MX_FSMC_Init+0xbc>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001656:	2210      	movs	r2, #16
 8001658:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_FSMC_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_FSMC_Init+0xbc>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_FSMC_Init+0xbc>)
 800167c:	2200      	movs	r2, #0
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001682:	2200      	movs	r2, #0
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_FSMC_Init+0xbc>)
 8001688:	2200      	movs	r2, #0
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_FSMC_Init+0xbc>)
 800168e:	2200      	movs	r2, #0
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001692:	230f      	movs	r3, #15
 8001694:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001696:	230f      	movs	r3, #15
 8001698:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800169a:	23ff      	movs	r3, #255	; 0xff
 800169c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800169e:	230f      	movs	r3, #15
 80016a0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80016a2:	2310      	movs	r3, #16
 80016a4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80016a6:	2311      	movs	r3, #17
 80016a8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <MX_FSMC_Init+0xbc>)
 80016b6:	f002 f899 	bl	80037ec <HAL_SRAM_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80016c0:	f000 f810 	bl	80016e4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_FSMC_Init+0xc4>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <MX_FSMC_Init+0xc4>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80016d0:	bf00      	nop
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000e0 	.word	0x200000e0
 80016dc:	a0000104 	.word	0xa0000104
 80016e0:	40010000 	.word	0x40010000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_MspInit+0x5c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_MspInit+0x5c>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_MspInit+0x5c>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_MspInit+0x5c>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_MspInit+0x60>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_MspInit+0x60>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <HAL_I2C_MspInit+0x74>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d124      	bne.n	80017be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_I2C_MspInit+0x78>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_I2C_MspInit+0x78>)
 800177a:	f043 0308 	orr.w	r3, r3, #8
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_I2C_MspInit+0x78>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800178c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001792:	2312      	movs	r3, #18
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <HAL_I2C_MspInit+0x7c>)
 80017a2:	f000 fa59 	bl	8001c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_I2C_MspInit+0x78>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_I2C_MspInit+0x78>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_I2C_MspInit+0x78>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005800 	.word	0x40005800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <HAL_FSMC_MspInit+0x78>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d129      	bne.n	8001844 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_FSMC_MspInit+0x78>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80017f6:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_FSMC_MspInit+0x7c>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <HAL_FSMC_MspInit+0x7c>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_FSMC_MspInit+0x7c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800180e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001812:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4619      	mov	r1, r3
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <HAL_FSMC_MspInit+0x80>)
 8001824:	f000 fa18 	bl	8001c58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001828:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800182c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4619      	mov	r1, r3
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_FSMC_MspInit+0x84>)
 800183e:	f000 fa0b 	bl	8001c58 <HAL_GPIO_Init>
 8001842:	e000      	b.n	8001846 <HAL_FSMC_MspInit+0x72>
    return;
 8001844:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000128 	.word	0x20000128
 8001850:	40021000 	.word	0x40021000
 8001854:	40011800 	.word	0x40011800
 8001858:	40011400 	.word	0x40011400

0800185c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001864:	f7ff ffb6 	bl	80017d4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <NMI_Handler+0x4>

08001876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <MemManage_Handler+0x4>

08001882 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <UsageFault_Handler+0x4>

0800188e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b6:	f000 f8ab 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c8:	4a14      	ldr	r2, [pc, #80]	; (800191c <_sbrk+0x5c>)
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <_sbrk+0x60>)
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <_sbrk+0x64>)
 80018de:	4a12      	ldr	r2, [pc, #72]	; (8001928 <_sbrk+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d207      	bcs.n	8001900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f0:	f002 f8a0 	bl	8003a34 <__errno>
 80018f4:	4603      	mov	r3, r0
 80018f6:	220c      	movs	r2, #12
 80018f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e009      	b.n	8001914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <_sbrk+0x64>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_sbrk+0x64>)
 8001910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20010000 	.word	0x20010000
 8001920:	00000400 	.word	0x00000400
 8001924:	2000012c 	.word	0x2000012c
 8001928:	20000148 	.word	0x20000148

0800192c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800193a:	490d      	ldr	r1, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001950:	4c0a      	ldr	r4, [pc, #40]	; (800197c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800195e:	f7ff ffe5 	bl	800192c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f002 f86d 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001966:	f7ff fb79 	bl	800105c <main>
  bx lr
 800196a:	4770      	bx	lr
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001970:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001974:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 8001978:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800197c:	20000144 	.word	0x20000144

08001980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC1_2_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x28>)
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 f92b 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	200f      	movs	r0, #15
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fea6 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f935 	bl	8001c3e <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 f90b 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x1c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_IncTick+0x20>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_IncTick+0x20>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20000130 	.word	0x20000130

08001a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <HAL_GetTick+0x10>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000130 	.word	0x20000130

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff fff0 	bl	8001a34 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffe0 	bl	8001a34 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000008 	.word	0x20000008

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	; (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	; (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff90 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff49 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff5e 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff90 	bl	8001b48 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5f 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffb0 	bl	8001bac <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	e179      	b.n	8001f60 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8168 	bne.w	8001f5a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4a96      	ldr	r2, [pc, #600]	; (8001ee8 <HAL_GPIO_Init+0x290>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d05e      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001c94:	4a94      	ldr	r2, [pc, #592]	; (8001ee8 <HAL_GPIO_Init+0x290>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d875      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001c9a:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_GPIO_Init+0x294>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d058      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001ca0:	4a92      	ldr	r2, [pc, #584]	; (8001eec <HAL_GPIO_Init+0x294>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d86f      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001ca6:	4a92      	ldr	r2, [pc, #584]	; (8001ef0 <HAL_GPIO_Init+0x298>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d052      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001cac:	4a90      	ldr	r2, [pc, #576]	; (8001ef0 <HAL_GPIO_Init+0x298>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d869      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cb2:	4a90      	ldr	r2, [pc, #576]	; (8001ef4 <HAL_GPIO_Init+0x29c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d04c      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a8e      	ldr	r2, [pc, #568]	; (8001ef4 <HAL_GPIO_Init+0x29c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d863      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cbe:	4a8e      	ldr	r2, [pc, #568]	; (8001ef8 <HAL_GPIO_Init+0x2a0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d046      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a8c      	ldr	r2, [pc, #560]	; (8001ef8 <HAL_GPIO_Init+0x2a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d85d      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cca:	2b12      	cmp	r3, #18
 8001ccc:	d82a      	bhi.n	8001d24 <HAL_GPIO_Init+0xcc>
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d859      	bhi.n	8001d86 <HAL_GPIO_Init+0x12e>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_GPIO_Init+0x80>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001d53 	.word	0x08001d53
 8001cdc:	08001d2d 	.word	0x08001d2d
 8001ce0:	08001d3f 	.word	0x08001d3f
 8001ce4:	08001d81 	.word	0x08001d81
 8001ce8:	08001d87 	.word	0x08001d87
 8001cec:	08001d87 	.word	0x08001d87
 8001cf0:	08001d87 	.word	0x08001d87
 8001cf4:	08001d87 	.word	0x08001d87
 8001cf8:	08001d87 	.word	0x08001d87
 8001cfc:	08001d87 	.word	0x08001d87
 8001d00:	08001d87 	.word	0x08001d87
 8001d04:	08001d87 	.word	0x08001d87
 8001d08:	08001d87 	.word	0x08001d87
 8001d0c:	08001d87 	.word	0x08001d87
 8001d10:	08001d87 	.word	0x08001d87
 8001d14:	08001d87 	.word	0x08001d87
 8001d18:	08001d87 	.word	0x08001d87
 8001d1c:	08001d35 	.word	0x08001d35
 8001d20:	08001d49 	.word	0x08001d49
 8001d24:	4a75      	ldr	r2, [pc, #468]	; (8001efc <HAL_GPIO_Init+0x2a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d2a:	e02c      	b.n	8001d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e029      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	623b      	str	r3, [r7, #32]
          break;
 8001d3c:	e024      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	3308      	adds	r3, #8
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e01f      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	330c      	adds	r3, #12
 8001d4e:	623b      	str	r3, [r7, #32]
          break;
 8001d50:	e01a      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e013      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	611a      	str	r2, [r3, #16]
          break;
 8001d72:	e009      	b.n	8001d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d74:	2308      	movs	r3, #8
 8001d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	615a      	str	r2, [r3, #20]
          break;
 8001d7e:	e003      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x130>
          break;
 8001d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d801      	bhi.n	8001d92 <HAL_GPIO_Init+0x13a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_Init+0x13e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2bff      	cmp	r3, #255	; 0xff
 8001d9c:	d802      	bhi.n	8001da4 <HAL_GPIO_Init+0x14c>
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	e002      	b.n	8001daa <HAL_GPIO_Init+0x152>
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3b08      	subs	r3, #8
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	210f      	movs	r1, #15
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	fa01 f303 	lsl.w	r3, r1, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	401a      	ands	r2, r3
 8001dbc:	6a39      	ldr	r1, [r7, #32]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80c1 	beq.w	8001f5a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_GPIO_Init+0x2a8>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_GPIO_Init+0x2a8>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_GPIO_Init+0x2a8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001df0:	4a44      	ldr	r2, [pc, #272]	; (8001f04 <HAL_GPIO_Init+0x2ac>)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3c      	ldr	r2, [pc, #240]	; (8001f08 <HAL_GPIO_Init+0x2b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d01f      	beq.n	8001e5c <HAL_GPIO_Init+0x204>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3b      	ldr	r2, [pc, #236]	; (8001f0c <HAL_GPIO_Init+0x2b4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d019      	beq.n	8001e58 <HAL_GPIO_Init+0x200>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <HAL_GPIO_Init+0x2b8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_GPIO_Init+0x1fc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a39      	ldr	r2, [pc, #228]	; (8001f14 <HAL_GPIO_Init+0x2bc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1f8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <HAL_GPIO_Init+0x2c0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1f4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a37      	ldr	r2, [pc, #220]	; (8001f1c <HAL_GPIO_Init+0x2c4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1f0>
 8001e44:	2305      	movs	r3, #5
 8001e46:	e00a      	b.n	8001e5e <HAL_GPIO_Init+0x206>
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e008      	b.n	8001e5e <HAL_GPIO_Init+0x206>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x206>
 8001e50:	2303      	movs	r3, #3
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x206>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x206>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x206>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e6e:	4925      	ldr	r1, [pc, #148]	; (8001f04 <HAL_GPIO_Init+0x2ac>)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4924      	ldr	r1, [pc, #144]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4920      	ldr	r1, [pc, #128]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	491a      	ldr	r1, [pc, #104]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d025      	beq.n	8001f24 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4910      	ldr	r1, [pc, #64]	; (8001f20 <HAL_GPIO_Init+0x2c8>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
 8001ee4:	e025      	b.n	8001f32 <HAL_GPIO_Init+0x2da>
 8001ee6:	bf00      	nop
 8001ee8:	10320000 	.word	0x10320000
 8001eec:	10310000 	.word	0x10310000
 8001ef0:	10220000 	.word	0x10220000
 8001ef4:	10210000 	.word	0x10210000
 8001ef8:	10120000 	.word	0x10120000
 8001efc:	10110000 	.word	0x10110000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	40011000 	.word	0x40011000
 8001f14:	40011400 	.word	0x40011400
 8001f18:	40011800 	.word	0x40011800
 8001f1c:	40011c00 	.word	0x40011c00
 8001f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	4913      	ldr	r1, [pc, #76]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4909      	ldr	r1, [pc, #36]	; (8001f7c <HAL_GPIO_Init+0x324>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f47f ae7e 	bne.w	8001c6c <HAL_GPIO_Init+0x14>
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	372c      	adds	r7, #44	; 0x2c
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	40010400 	.word	0x40010400

08001f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e001      	b.n	8001fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	807b      	strh	r3, [r7, #2]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fbe:	787b      	ldrb	r3, [r7, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc4:	887a      	ldrh	r2, [r7, #2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fca:	e003      	b.n	8001fd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	041a      	lsls	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	611a      	str	r2, [r3, #16]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e12b      	b.n	800224a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fba4 	bl	8001754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002044:	f001 fba0 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a81      	ldr	r2, [pc, #516]	; (8002254 <HAL_I2C_Init+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d807      	bhi.n	8002064 <HAL_I2C_Init+0x84>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a80      	ldr	r2, [pc, #512]	; (8002258 <HAL_I2C_Init+0x278>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e006      	b.n	8002072 <HAL_I2C_Init+0x92>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a7d      	ldr	r2, [pc, #500]	; (800225c <HAL_I2C_Init+0x27c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e7      	b.n	800224a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a78      	ldr	r2, [pc, #480]	; (8002260 <HAL_I2C_Init+0x280>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_I2C_Init+0x274>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <HAL_I2C_Init+0xd4>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	e009      	b.n	80020c8 <HAL_I2C_Init+0xe8>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_I2C_Init+0x284>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3301      	adds	r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	495c      	ldr	r1, [pc, #368]	; (8002254 <HAL_I2C_Init+0x274>)
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d819      	bhi.n	800211c <HAL_I2C_Init+0x13c>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e59      	subs	r1, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020fc:	400b      	ands	r3, r1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_I2C_Init+0x138>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	e051      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002118:	2304      	movs	r3, #4
 800211a:	e04f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_I2C_Init+0x168>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_I2C_Init+0x18e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Init+0x196>
 8002172:	2301      	movs	r3, #1
 8002174:	e022      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <HAL_I2C_Init+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e58      	subs	r0, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6911      	ldr	r1, [r2, #16]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	000186a0 	.word	0x000186a0
 8002258:	001e847f 	.word	0x001e847f
 800225c:	003d08ff 	.word	0x003d08ff
 8002260:	431bde83 	.word	0x431bde83
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	817b      	strh	r3, [r7, #10]
 800227a:	460b      	mov	r3, r1
 800227c:	813b      	strh	r3, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002282:	f7ff fbd7 	bl	8001a34 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	f040 80d9 	bne.w	8002448 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2319      	movs	r3, #25
 800229c:	2201      	movs	r2, #1
 800229e:	496d      	ldr	r1, [pc, #436]	; (8002454 <HAL_I2C_Mem_Write+0x1ec>)
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fcc1 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0cc      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Mem_Write+0x56>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0c5      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d007      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2221      	movs	r2, #33	; 0x21
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <HAL_I2C_Mem_Write+0x1f0>)
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002326:	88f8      	ldrh	r0, [r7, #6]
 8002328:	893a      	ldrh	r2, [r7, #8]
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4603      	mov	r3, r0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 faf8 	bl	800292c <I2C_RequestMemoryWrite>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d052      	beq.n	80023e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e081      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fd42 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b04      	cmp	r3, #4
 800235c:	d107      	bne.n	800236e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06b      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11b      	bne.n	80023e8 <HAL_I2C_Mem_Write+0x180>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d017      	beq.n	80023e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1aa      	bne.n	8002346 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fd2e 	bl	8002e56 <I2C_WaitOnBTFFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002416:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e016      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	00100002 	.word	0x00100002
 8002458:	ffff0000 	.word	0xffff0000

0800245c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	; 0x30
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	817b      	strh	r3, [r7, #10]
 800246e:	460b      	mov	r3, r1
 8002470:	813b      	strh	r3, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800247a:	f7ff fadb 	bl	8001a34 <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b20      	cmp	r3, #32
 800248a:	f040 8244 	bne.w	8002916 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2319      	movs	r3, #25
 8002494:	2201      	movs	r2, #1
 8002496:	4982      	ldr	r1, [pc, #520]	; (80026a0 <HAL_I2C_Mem_Read+0x244>)
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fbc5 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024a4:	2302      	movs	r3, #2
 80024a6:	e237      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Mem_Read+0x5a>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e230      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d007      	beq.n	80024dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2222      	movs	r2, #34	; 0x22
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2240      	movs	r2, #64	; 0x40
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800250c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a62      	ldr	r2, [pc, #392]	; (80026a4 <HAL_I2C_Mem_Read+0x248>)
 800251c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800251e:	88f8      	ldrh	r0, [r7, #6]
 8002520:	893a      	ldrh	r2, [r7, #8]
 8002522:	8979      	ldrh	r1, [r7, #10]
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4603      	mov	r3, r0
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa92 	bl	8002a58 <I2C_RequestMemoryRead>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e1ec      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d113      	bne.n	800256e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e1c0      	b.n	80028f0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	2b01      	cmp	r3, #1
 8002574:	d11e      	bne.n	80025b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002586:	b672      	cpsid	i
}
 8002588:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025b0:	b662      	cpsie	i
}
 80025b2:	e035      	b.n	8002620 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d11e      	bne.n	80025fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025f6:	b662      	cpsie	i
}
 80025f8:	e012      	b.n	8002620 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002608:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002620:	e166      	b.n	80028f0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	2b03      	cmp	r3, #3
 8002628:	f200 811f 	bhi.w	800286a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002630:	2b01      	cmp	r3, #1
 8002632:	d123      	bne.n	800267c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fc4d 	bl	8002ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e167      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a
 800267a:	e139      	b.n	80028f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002680:	2b02      	cmp	r3, #2
 8002682:	d152      	bne.n	800272a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268a:	2200      	movs	r2, #0
 800268c:	4906      	ldr	r1, [pc, #24]	; (80026a8 <HAL_I2C_Mem_Read+0x24c>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 faca 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e13c      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
 800269e:	bf00      	nop
 80026a0:	00100002 	.word	0x00100002
 80026a4:	ffff0000 	.word	0xffff0000
 80026a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026f2:	b662      	cpsie	i
}
 80026f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002728:	e0e2      	b.n	80028f0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	2200      	movs	r2, #0
 8002732:	497b      	ldr	r1, [pc, #492]	; (8002920 <HAL_I2C_Mem_Read+0x4c4>)
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fa77 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0e9      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002754:	b672      	cpsid	i
}
 8002756:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800278a:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_I2C_Mem_Read+0x4c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_I2C_Mem_Read+0x4cc>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0a1a      	lsrs	r2, r3, #8
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d118      	bne.n	80027e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027d2:	b662      	cpsie	i
}
 80027d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e09a      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d1d9      	bne.n	80027a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002832:	b662      	cpsie	i
}
 8002834:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002868:	e042      	b.n	80028f0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fb32 	bl	8002ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04c      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d118      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f ae94 	bne.w	8002622 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00010004 	.word	0x00010004
 8002924:	20000000 	.word	0x20000000
 8002928:	14f8b589 	.word	0x14f8b589

0800292c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2200      	movs	r2, #0
 800295e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f960 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297c:	d103      	bne.n	8002986 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e05f      	b.n	8002a4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800298a:	897b      	ldrh	r3, [r7, #10]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002998:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	492d      	ldr	r1, [pc, #180]	; (8002a54 <I2C_RequestMemoryWrite+0x128>)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f998 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e04c      	b.n	8002a4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fa02 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e02b      	b.n	8002a4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f8:	893b      	ldrh	r3, [r7, #8]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	e021      	b.n	8002a48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a04:	893b      	ldrh	r3, [r7, #8]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 f9dc 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00d      	beq.n	8002a3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d107      	bne.n	8002a3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e005      	b.n	8002a4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a3e:	893b      	ldrh	r3, [r7, #8]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	00010002 	.word	0x00010002

08002a58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8c2 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab8:	d103      	bne.n	8002ac2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e0aa      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	4952      	ldr	r1, [pc, #328]	; (8002c24 <I2C_RequestMemoryRead+0x1cc>)
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f8fa 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e097      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b04:	6a39      	ldr	r1, [r7, #32]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f964 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00d      	beq.n	8002b2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d107      	bne.n	8002b2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e076      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	e021      	b.n	8002b84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f93e 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d107      	bne.n	8002b76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e050      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b86:	6a39      	ldr	r1, [r7, #32]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f923 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d107      	bne.n	8002bac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e035      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f82b 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be6:	d103      	bne.n	8002bf0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e013      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <I2C_RequestMemoryRead+0x1cc>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f863 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	00010002 	.word	0x00010002

08002c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c38:	e025      	b.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d021      	beq.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe fef7 	bl	8001a34 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e023      	b.n	8002cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10d      	bne.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	e00c      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d0b6      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce4:	e051      	b.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d123      	bne.n	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0204 	orr.w	r2, r3, #4
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e046      	b.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d021      	beq.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe fe75 	bl	8001a34 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e020      	b.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10c      	bne.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e00b      	b.n	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	43da      	mvns	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d18d      	bne.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de0:	e02d      	b.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f8ce 	bl	8002f84 <I2C_IsAcknowledgeFailed>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e02d      	b.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d021      	beq.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fe1b 	bl	8001a34 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d116      	bne.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d1ca      	bne.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e62:	e02d      	b.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f88d 	bl	8002f84 <I2C_IsAcknowledgeFailed>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e02d      	b.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d021      	beq.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7fe fdda 	bl	8001a34 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d1ca      	bne.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee4:	e042      	b.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d119      	bne.n	8002f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0210 	mvn.w	r2, #16
 8002efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e029      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fe fd84 	bl	8001a34 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d1b5      	bne.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9a:	d11b      	bne.n	8002fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0204 	orr.w	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e272      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8087 	beq.w	800310e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b04      	cmp	r3, #4
 800300a:	d00c      	beq.n	8003026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800300c:	4b8f      	ldr	r3, [pc, #572]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d112      	bne.n	800303e <HAL_RCC_OscConfig+0x5e>
 8003018:	4b8c      	ldr	r3, [pc, #560]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003024:	d10b      	bne.n	800303e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003026:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d06c      	beq.n	800310c <HAL_RCC_OscConfig+0x12c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d168      	bne.n	800310c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e24c      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x76>
 8003048:	4b80      	ldr	r3, [pc, #512]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a7f      	ldr	r2, [pc, #508]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e02e      	b.n	80030b4 <HAL_RCC_OscConfig+0xd4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b7b      	ldr	r3, [pc, #492]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7a      	ldr	r2, [pc, #488]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b78      	ldr	r3, [pc, #480]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a77      	ldr	r2, [pc, #476]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e01d      	b.n	80030b4 <HAL_RCC_OscConfig+0xd4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0xbc>
 8003082:	4b72      	ldr	r3, [pc, #456]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a71      	ldr	r2, [pc, #452]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6e      	ldr	r2, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0xd4>
 800309c:	4b6b      	ldr	r3, [pc, #428]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6a      	ldr	r2, [pc, #424]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b68      	ldr	r3, [pc, #416]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a67      	ldr	r2, [pc, #412]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d013      	beq.n	80030e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fcba 	bl	8001a34 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fcb6 	bl	8001a34 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e200      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe4>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fca6 	bl	8001a34 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fe fca2 	bl	8001a34 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1ec      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x10c>
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d063      	beq.n	80031e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311a:	4b4c      	ldr	r3, [pc, #304]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003126:	4b49      	ldr	r3, [pc, #292]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b08      	cmp	r3, #8
 8003130:	d11c      	bne.n	800316c <HAL_RCC_OscConfig+0x18c>
 8003132:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d116      	bne.n	800316c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x176>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e1c0      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4939      	ldr	r1, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	e03a      	b.n	80031e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fc5b 	bl	8001a34 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe fc57 	bl	8001a34 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1a1      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	4b2d      	ldr	r3, [pc, #180]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4927      	ldr	r1, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x270>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fc3a 	bl	8001a34 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c4:	f7fe fc36 	bl	8001a34 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e180      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03a      	beq.n	8003264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d019      	beq.n	800322a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f6:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_RCC_OscConfig+0x274>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fe fc1a 	bl	8001a34 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fe fc16 	bl	8001a34 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e160      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <HAL_RCC_OscConfig+0x26c>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003222:	2001      	movs	r0, #1
 8003224:	f000 fac4 	bl	80037b0 <RCC_Delay>
 8003228:	e01c      	b.n	8003264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <HAL_RCC_OscConfig+0x274>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe fc00 	bl	8001a34 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003236:	e00f      	b.n	8003258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe fbfc 	bl	8001a34 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d908      	bls.n	8003258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e146      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	42420000 	.word	0x42420000
 8003254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b92      	ldr	r3, [pc, #584]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e9      	bne.n	8003238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a6 	beq.w	80033be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	4b88      	ldr	r3, [pc, #544]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a87      	ldr	r2, [pc, #540]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	61d3      	str	r3, [r2, #28]
 800328e:	4b85      	ldr	r3, [pc, #532]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b7f      	ldr	r3, [pc, #508]	; (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7e      	ldr	r2, [pc, #504]	; (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fbbd 	bl	8001a34 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fe fbb9 	bl	8001a34 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	; 0x64
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e103      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b75      	ldr	r3, [pc, #468]	; (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x312>
 80032e4:	4b6f      	ldr	r3, [pc, #444]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a6e      	ldr	r2, [pc, #440]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e02d      	b.n	800334e <HAL_RCC_OscConfig+0x36e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x334>
 80032fa:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4a69      	ldr	r2, [pc, #420]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6213      	str	r3, [r2, #32]
 8003306:	4b67      	ldr	r3, [pc, #412]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4a66      	ldr	r2, [pc, #408]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	6213      	str	r3, [r2, #32]
 8003312:	e01c      	b.n	800334e <HAL_RCC_OscConfig+0x36e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b05      	cmp	r3, #5
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x356>
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4a60      	ldr	r2, [pc, #384]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6213      	str	r3, [r2, #32]
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a5d      	ldr	r2, [pc, #372]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	e00b      	b.n	800334e <HAL_RCC_OscConfig+0x36e>
 8003336:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6213      	str	r3, [r2, #32]
 8003342:	4b58      	ldr	r3, [pc, #352]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4a57      	ldr	r2, [pc, #348]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d015      	beq.n	8003382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fe fb6d 	bl	8001a34 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fe fb69 	bl	8001a34 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0b1      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ee      	beq.n	800335e <HAL_RCC_OscConfig+0x37e>
 8003380:	e014      	b.n	80033ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fb57 	bl	8001a34 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe fb53 	bl	8001a34 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e09b      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ee      	bne.n	800338a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b2:	4b3c      	ldr	r3, [pc, #240]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8087 	beq.w	80034d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d061      	beq.n	8003498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d146      	bne.n	800346a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_RCC_OscConfig+0x4cc>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe fb27 	bl	8001a34 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe fb23 	bl	8001a34 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e06d      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fc:	4b29      	ldr	r3, [pc, #164]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d108      	bne.n	8003424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4921      	ldr	r1, [pc, #132]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a19      	ldr	r1, [r3, #32]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	430b      	orrs	r3, r1
 8003436:	491b      	ldr	r1, [pc, #108]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCC_OscConfig+0x4cc>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe faf7 	bl	8001a34 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe faf3 	bl	8001a34 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03d      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x46a>
 8003468:	e035      	b.n	80034d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_RCC_OscConfig+0x4cc>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fae0 	bl	8001a34 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fadc 	bl	8001a34 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e026      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x498>
 8003496:	e01e      	b.n	80034d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e019      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x500>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000

080034e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d0      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4965      	ldr	r1, [pc, #404]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a58      	ldr	r2, [pc, #352]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800354a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a52      	ldr	r2, [pc, #328]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d040      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e073      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06b      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4936      	ldr	r1, [pc, #216]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fa2e 	bl	8001a34 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fe fa2a 	bl	8001a34 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e053      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d210      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4922      	ldr	r1, [pc, #136]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f821 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003676:	4602      	mov	r2, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	490a      	ldr	r1, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	5ccb      	ldrb	r3, [r1, r3]
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1cc>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe f98c 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08004ec4 	.word	0x08004ec4
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b490      	push	{r4, r7}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <HAL_RCC_GetSysClockFreq+0xac>)
 80036c0:	1d3c      	adds	r4, r7, #4
 80036c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036c8:	f240 2301 	movw	r3, #513	; 0x201
 80036cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x40>
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x46>
 80036f6:	e02b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <HAL_RCC_GetSysClockFreq+0xb4>)
 80036fa:	623b      	str	r3, [r7, #32]
      break;
 80036fc:	e02b      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	0c9b      	lsrs	r3, r3, #18
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3328      	adds	r3, #40	; 0x28
 8003708:	443b      	add	r3, r7
 800370a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800370e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb0>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	0c5b      	lsrs	r3, r3, #17
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	3328      	adds	r3, #40	; 0x28
 8003726:	443b      	add	r3, r7
 8003728:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800372c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	4a0e      	ldr	r2, [pc, #56]	; (800376c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003732:	fb03 f202 	mul.w	r2, r3, r2
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e004      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	623b      	str	r3, [r7, #32]
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003752:	623b      	str	r3, [r7, #32]
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	6a3b      	ldr	r3, [r7, #32]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3728      	adds	r7, #40	; 0x28
 800375c:	46bd      	mov	sp, r7
 800375e:	bc90      	pop	{r4, r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	0800487c 	.word	0x0800487c
 8003768:	40021000 	.word	0x40021000
 800376c:	007a1200 	.word	0x007a1200
 8003770:	003d0900 	.word	0x003d0900

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_RCC_GetHCLKFreq+0x10>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	20000000 	.word	0x20000000

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff2 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08004ed4 	.word	0x08004ed4

080037b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <RCC_Delay+0x34>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <RCC_Delay+0x38>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0a5b      	lsrs	r3, r3, #9
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037cc:	bf00      	nop
  }
  while (Delay --);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e5a      	subs	r2, r3, #1
 80037d2:	60fa      	str	r2, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f9      	bne.n	80037cc <RCC_Delay+0x1c>
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	20000000 	.word	0x20000000
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_SRAM_Init+0x1c>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d101      	bne.n	800380c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e038      	b.n	800387e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7fe f81b 	bl	800185c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3308      	adds	r3, #8
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f000 f829 	bl	8003888 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	461a      	mov	r2, r3
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	f000 f88b 	bl	800395c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6858      	ldr	r0, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	f000 f8b6 	bl	80039c4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	6892      	ldr	r2, [r2, #8]
 800386c:	f041 0101 	orr.w	r1, r1, #1
 8003870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	f023 0101 	bic.w	r1, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d102      	bne.n	80038b8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80038b2:	2340      	movs	r3, #64	; 0x40
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e001      	b.n	80038bc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80038c8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80038ce:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80038d4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80038da:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80038e0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80038e6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80038ec:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80038f2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80038f8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <FSMC_NORSRAM_Init+0xd0>)
 8003918:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003920:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003928:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43db      	mvns	r3, r3
 8003938:	ea02 0103 	and.w	r1, r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4319      	orrs	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	0008fb7f 	.word	0x0008fb7f

0800395c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003972:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	431a      	orrs	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	431a      	orrs	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	431a      	orrs	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	3b01      	subs	r3, #1
 8003998:	051b      	lsls	r3, r3, #20
 800399a:	431a      	orrs	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	3b02      	subs	r3, #2
 80039a2:	061b      	lsls	r3, r3, #24
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	3201      	adds	r2, #1
 80039b0:	4319      	orrs	r1, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d8:	d11d      	bne.n	8003a16 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	6811      	ldr	r1, [r2, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	6852      	ldr	r2, [r2, #4]
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	4311      	orrs	r1, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	6892      	ldr	r2, [r2, #8]
 80039f6:	0212      	lsls	r2, r2, #8
 80039f8:	4311      	orrs	r1, r2
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	6992      	ldr	r2, [r2, #24]
 80039fe:	4311      	orrs	r1, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	68d2      	ldr	r2, [r2, #12]
 8003a04:	0412      	lsls	r2, r2, #16
 8003a06:	430a      	orrs	r2, r1
 8003a08:	ea43 0102 	orr.w	r1, r3, r2
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a14:	e005      	b.n	8003a22 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	cff00000 	.word	0xcff00000

08003a34 <__errno>:
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <__errno+0x8>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	2000000c 	.word	0x2000000c

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	2600      	movs	r6, #0
 8003a44:	4d0c      	ldr	r5, [pc, #48]	; (8003a78 <__libc_init_array+0x38>)
 8003a46:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	f000 ff00 	bl	8004854 <_init>
 8003a54:	2600      	movs	r6, #0
 8003a56:	4d0a      	ldr	r5, [pc, #40]	; (8003a80 <__libc_init_array+0x40>)
 8003a58:	4c0a      	ldr	r4, [pc, #40]	; (8003a84 <__libc_init_array+0x44>)
 8003a5a:	1b64      	subs	r4, r4, r5
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	08004f80 	.word	0x08004f80
 8003a7c:	08004f80 	.word	0x08004f80
 8003a80:	08004f80 	.word	0x08004f80
 8003a84:	08004f84 	.word	0x08004f84

08003a88 <memset>:
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4402      	add	r2, r0
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	f803 1b01 	strb.w	r1, [r3], #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <siprintf>:
 8003a98:	b40e      	push	{r1, r2, r3}
 8003a9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a9e:	b500      	push	{lr}
 8003aa0:	b09c      	sub	sp, #112	; 0x70
 8003aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8003aa4:	9002      	str	r0, [sp, #8]
 8003aa6:	9006      	str	r0, [sp, #24]
 8003aa8:	9107      	str	r1, [sp, #28]
 8003aaa:	9104      	str	r1, [sp, #16]
 8003aac:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <siprintf+0x38>)
 8003aae:	4909      	ldr	r1, [pc, #36]	; (8003ad4 <siprintf+0x3c>)
 8003ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ab4:	9105      	str	r1, [sp, #20]
 8003ab6:	6800      	ldr	r0, [r0, #0]
 8003ab8:	a902      	add	r1, sp, #8
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	f000 f868 	bl	8003b90 <_svfiprintf_r>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	9b02      	ldr	r3, [sp, #8]
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	b01c      	add	sp, #112	; 0x70
 8003ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003acc:	b003      	add	sp, #12
 8003ace:	4770      	bx	lr
 8003ad0:	2000000c 	.word	0x2000000c
 8003ad4:	ffff0208 	.word	0xffff0208

08003ad8 <__ssputs_r>:
 8003ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003adc:	688e      	ldr	r6, [r1, #8]
 8003ade:	4682      	mov	sl, r0
 8003ae0:	429e      	cmp	r6, r3
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	4690      	mov	r8, r2
 8003ae6:	461f      	mov	r7, r3
 8003ae8:	d838      	bhi.n	8003b5c <__ssputs_r+0x84>
 8003aea:	898a      	ldrh	r2, [r1, #12]
 8003aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003af0:	d032      	beq.n	8003b58 <__ssputs_r+0x80>
 8003af2:	6825      	ldr	r5, [r4, #0]
 8003af4:	6909      	ldr	r1, [r1, #16]
 8003af6:	3301      	adds	r3, #1
 8003af8:	eba5 0901 	sub.w	r9, r5, r1
 8003afc:	6965      	ldr	r5, [r4, #20]
 8003afe:	444b      	add	r3, r9
 8003b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b08:	106d      	asrs	r5, r5, #1
 8003b0a:	429d      	cmp	r5, r3
 8003b0c:	bf38      	it	cc
 8003b0e:	461d      	movcc	r5, r3
 8003b10:	0553      	lsls	r3, r2, #21
 8003b12:	d531      	bpl.n	8003b78 <__ssputs_r+0xa0>
 8003b14:	4629      	mov	r1, r5
 8003b16:	f000 fb6f 	bl	80041f8 <_malloc_r>
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	b950      	cbnz	r0, 8003b34 <__ssputs_r+0x5c>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	f8ca 3000 	str.w	r3, [sl]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b34:	464a      	mov	r2, r9
 8003b36:	6921      	ldr	r1, [r4, #16]
 8003b38:	f000 face 	bl	80040d8 <memcpy>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	6126      	str	r6, [r4, #16]
 8003b4a:	444e      	add	r6, r9
 8003b4c:	6026      	str	r6, [r4, #0]
 8003b4e:	463e      	mov	r6, r7
 8003b50:	6165      	str	r5, [r4, #20]
 8003b52:	eba5 0509 	sub.w	r5, r5, r9
 8003b56:	60a5      	str	r5, [r4, #8]
 8003b58:	42be      	cmp	r6, r7
 8003b5a:	d900      	bls.n	8003b5e <__ssputs_r+0x86>
 8003b5c:	463e      	mov	r6, r7
 8003b5e:	4632      	mov	r2, r6
 8003b60:	4641      	mov	r1, r8
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	f000 fac6 	bl	80040f4 <memmove>
 8003b68:	68a3      	ldr	r3, [r4, #8]
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	1b9b      	subs	r3, r3, r6
 8003b6e:	60a3      	str	r3, [r4, #8]
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	4433      	add	r3, r6
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	e7db      	b.n	8003b30 <__ssputs_r+0x58>
 8003b78:	462a      	mov	r2, r5
 8003b7a:	f000 fbb1 	bl	80042e0 <_realloc_r>
 8003b7e:	4606      	mov	r6, r0
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d1e1      	bne.n	8003b48 <__ssputs_r+0x70>
 8003b84:	4650      	mov	r0, sl
 8003b86:	6921      	ldr	r1, [r4, #16]
 8003b88:	f000 face 	bl	8004128 <_free_r>
 8003b8c:	e7c7      	b.n	8003b1e <__ssputs_r+0x46>
	...

08003b90 <_svfiprintf_r>:
 8003b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b94:	4698      	mov	r8, r3
 8003b96:	898b      	ldrh	r3, [r1, #12]
 8003b98:	4607      	mov	r7, r0
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	460d      	mov	r5, r1
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	b09d      	sub	sp, #116	; 0x74
 8003ba2:	d50e      	bpl.n	8003bc2 <_svfiprintf_r+0x32>
 8003ba4:	690b      	ldr	r3, [r1, #16]
 8003ba6:	b963      	cbnz	r3, 8003bc2 <_svfiprintf_r+0x32>
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	f000 fb25 	bl	80041f8 <_malloc_r>
 8003bae:	6028      	str	r0, [r5, #0]
 8003bb0:	6128      	str	r0, [r5, #16]
 8003bb2:	b920      	cbnz	r0, 8003bbe <_svfiprintf_r+0x2e>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e0d1      	b.n	8003d62 <_svfiprintf_r+0x1d2>
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	616b      	str	r3, [r5, #20]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc6:	2320      	movs	r3, #32
 8003bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bcc:	2330      	movs	r3, #48	; 0x30
 8003bce:	f04f 0901 	mov.w	r9, #1
 8003bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d7c <_svfiprintf_r+0x1ec>
 8003bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bde:	4623      	mov	r3, r4
 8003be0:	469a      	mov	sl, r3
 8003be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003be6:	b10a      	cbz	r2, 8003bec <_svfiprintf_r+0x5c>
 8003be8:	2a25      	cmp	r2, #37	; 0x25
 8003bea:	d1f9      	bne.n	8003be0 <_svfiprintf_r+0x50>
 8003bec:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf0:	d00b      	beq.n	8003c0a <_svfiprintf_r+0x7a>
 8003bf2:	465b      	mov	r3, fp
 8003bf4:	4622      	mov	r2, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f7ff ff6d 	bl	8003ad8 <__ssputs_r>
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f000 80aa 	beq.w	8003d58 <_svfiprintf_r+0x1c8>
 8003c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c06:	445a      	add	r2, fp
 8003c08:	9209      	str	r2, [sp, #36]	; 0x24
 8003c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80a2 	beq.w	8003d58 <_svfiprintf_r+0x1c8>
 8003c14:	2300      	movs	r3, #0
 8003c16:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c1e:	f10a 0a01 	add.w	sl, sl, #1
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	9307      	str	r3, [sp, #28]
 8003c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c2c:	4654      	mov	r4, sl
 8003c2e:	2205      	movs	r2, #5
 8003c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c34:	4851      	ldr	r0, [pc, #324]	; (8003d7c <_svfiprintf_r+0x1ec>)
 8003c36:	f000 fa41 	bl	80040bc <memchr>
 8003c3a:	9a04      	ldr	r2, [sp, #16]
 8003c3c:	b9d8      	cbnz	r0, 8003c76 <_svfiprintf_r+0xe6>
 8003c3e:	06d0      	lsls	r0, r2, #27
 8003c40:	bf44      	itt	mi
 8003c42:	2320      	movmi	r3, #32
 8003c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c48:	0711      	lsls	r1, r2, #28
 8003c4a:	bf44      	itt	mi
 8003c4c:	232b      	movmi	r3, #43	; 0x2b
 8003c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c52:	f89a 3000 	ldrb.w	r3, [sl]
 8003c56:	2b2a      	cmp	r3, #42	; 0x2a
 8003c58:	d015      	beq.n	8003c86 <_svfiprintf_r+0xf6>
 8003c5a:	4654      	mov	r4, sl
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f04f 0c0a 	mov.w	ip, #10
 8003c62:	9a07      	ldr	r2, [sp, #28]
 8003c64:	4621      	mov	r1, r4
 8003c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c6a:	3b30      	subs	r3, #48	; 0x30
 8003c6c:	2b09      	cmp	r3, #9
 8003c6e:	d94e      	bls.n	8003d0e <_svfiprintf_r+0x17e>
 8003c70:	b1b0      	cbz	r0, 8003ca0 <_svfiprintf_r+0x110>
 8003c72:	9207      	str	r2, [sp, #28]
 8003c74:	e014      	b.n	8003ca0 <_svfiprintf_r+0x110>
 8003c76:	eba0 0308 	sub.w	r3, r0, r8
 8003c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	46a2      	mov	sl, r4
 8003c82:	9304      	str	r3, [sp, #16]
 8003c84:	e7d2      	b.n	8003c2c <_svfiprintf_r+0x9c>
 8003c86:	9b03      	ldr	r3, [sp, #12]
 8003c88:	1d19      	adds	r1, r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	9103      	str	r1, [sp, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bfbb      	ittet	lt
 8003c92:	425b      	neglt	r3, r3
 8003c94:	f042 0202 	orrlt.w	r2, r2, #2
 8003c98:	9307      	strge	r3, [sp, #28]
 8003c9a:	9307      	strlt	r3, [sp, #28]
 8003c9c:	bfb8      	it	lt
 8003c9e:	9204      	strlt	r2, [sp, #16]
 8003ca0:	7823      	ldrb	r3, [r4, #0]
 8003ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ca4:	d10c      	bne.n	8003cc0 <_svfiprintf_r+0x130>
 8003ca6:	7863      	ldrb	r3, [r4, #1]
 8003ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8003caa:	d135      	bne.n	8003d18 <_svfiprintf_r+0x188>
 8003cac:	9b03      	ldr	r3, [sp, #12]
 8003cae:	3402      	adds	r4, #2
 8003cb0:	1d1a      	adds	r2, r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bfb8      	it	lt
 8003cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cbe:	9305      	str	r3, [sp, #20]
 8003cc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d80 <_svfiprintf_r+0x1f0>
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	4650      	mov	r0, sl
 8003cc8:	7821      	ldrb	r1, [r4, #0]
 8003cca:	f000 f9f7 	bl	80040bc <memchr>
 8003cce:	b140      	cbz	r0, 8003ce2 <_svfiprintf_r+0x152>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	eba0 000a 	sub.w	r0, r0, sl
 8003cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8003cda:	9b04      	ldr	r3, [sp, #16]
 8003cdc:	3401      	adds	r4, #1
 8003cde:	4303      	orrs	r3, r0
 8003ce0:	9304      	str	r3, [sp, #16]
 8003ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce6:	2206      	movs	r2, #6
 8003ce8:	4826      	ldr	r0, [pc, #152]	; (8003d84 <_svfiprintf_r+0x1f4>)
 8003cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cee:	f000 f9e5 	bl	80040bc <memchr>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d038      	beq.n	8003d68 <_svfiprintf_r+0x1d8>
 8003cf6:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <_svfiprintf_r+0x1f8>)
 8003cf8:	bb1b      	cbnz	r3, 8003d42 <_svfiprintf_r+0x1b2>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	3307      	adds	r3, #7
 8003cfe:	f023 0307 	bic.w	r3, r3, #7
 8003d02:	3308      	adds	r3, #8
 8003d04:	9303      	str	r3, [sp, #12]
 8003d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d08:	4433      	add	r3, r6
 8003d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0c:	e767      	b.n	8003bde <_svfiprintf_r+0x4e>
 8003d0e:	460c      	mov	r4, r1
 8003d10:	2001      	movs	r0, #1
 8003d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d16:	e7a5      	b.n	8003c64 <_svfiprintf_r+0xd4>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f04f 0c0a 	mov.w	ip, #10
 8003d1e:	4619      	mov	r1, r3
 8003d20:	3401      	adds	r4, #1
 8003d22:	9305      	str	r3, [sp, #20]
 8003d24:	4620      	mov	r0, r4
 8003d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2a:	3a30      	subs	r2, #48	; 0x30
 8003d2c:	2a09      	cmp	r2, #9
 8003d2e:	d903      	bls.n	8003d38 <_svfiprintf_r+0x1a8>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0c5      	beq.n	8003cc0 <_svfiprintf_r+0x130>
 8003d34:	9105      	str	r1, [sp, #20]
 8003d36:	e7c3      	b.n	8003cc0 <_svfiprintf_r+0x130>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d40:	e7f0      	b.n	8003d24 <_svfiprintf_r+0x194>
 8003d42:	ab03      	add	r3, sp, #12
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	462a      	mov	r2, r5
 8003d48:	4638      	mov	r0, r7
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <_svfiprintf_r+0x1fc>)
 8003d4c:	a904      	add	r1, sp, #16
 8003d4e:	f3af 8000 	nop.w
 8003d52:	1c42      	adds	r2, r0, #1
 8003d54:	4606      	mov	r6, r0
 8003d56:	d1d6      	bne.n	8003d06 <_svfiprintf_r+0x176>
 8003d58:	89ab      	ldrh	r3, [r5, #12]
 8003d5a:	065b      	lsls	r3, r3, #25
 8003d5c:	f53f af2c 	bmi.w	8003bb8 <_svfiprintf_r+0x28>
 8003d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d62:	b01d      	add	sp, #116	; 0x74
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	ab03      	add	r3, sp, #12
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	462a      	mov	r2, r5
 8003d6e:	4638      	mov	r0, r7
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <_svfiprintf_r+0x1fc>)
 8003d72:	a904      	add	r1, sp, #16
 8003d74:	f000 f87c 	bl	8003e70 <_printf_i>
 8003d78:	e7eb      	b.n	8003d52 <_svfiprintf_r+0x1c2>
 8003d7a:	bf00      	nop
 8003d7c:	08004edc 	.word	0x08004edc
 8003d80:	08004ee2 	.word	0x08004ee2
 8003d84:	08004ee6 	.word	0x08004ee6
 8003d88:	00000000 	.word	0x00000000
 8003d8c:	08003ad9 	.word	0x08003ad9

08003d90 <_printf_common>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	4616      	mov	r6, r2
 8003d96:	4699      	mov	r9, r3
 8003d98:	688a      	ldr	r2, [r1, #8]
 8003d9a:	690b      	ldr	r3, [r1, #16]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	bfb8      	it	lt
 8003da2:	4613      	movlt	r3, r2
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003daa:	460c      	mov	r4, r1
 8003dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db0:	b10a      	cbz	r2, 8003db6 <_printf_common+0x26>
 8003db2:	3301      	adds	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	0699      	lsls	r1, r3, #26
 8003dba:	bf42      	ittt	mi
 8003dbc:	6833      	ldrmi	r3, [r6, #0]
 8003dbe:	3302      	addmi	r3, #2
 8003dc0:	6033      	strmi	r3, [r6, #0]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d106      	bne.n	8003dd8 <_printf_common+0x48>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dc28      	bgt.n	8003e2a <_printf_common+0x9a>
 8003dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ddc:	1e13      	subs	r3, r2, #0
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	bf18      	it	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	0692      	lsls	r2, r2, #26
 8003de6:	d42d      	bmi.n	8003e44 <_printf_common+0xb4>
 8003de8:	4649      	mov	r1, r9
 8003dea:	4638      	mov	r0, r7
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d020      	beq.n	8003e38 <_printf_common+0xa8>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	68e5      	ldr	r5, [r4, #12]
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf18      	it	ne
 8003e02:	2500      	movne	r5, #0
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	f04f 0600 	mov.w	r6, #0
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	bf08      	it	eq
 8003e0e:	1aad      	subeq	r5, r5, r2
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf08      	it	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfc4      	itt	gt
 8003e1c:	1a9b      	subgt	r3, r3, r2
 8003e1e:	18ed      	addgt	r5, r5, r3
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xcc>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xac>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xb0>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c4      	b.n	8003dce <_printf_common+0x3e>
 8003e44:	2030      	movs	r0, #48	; 0x30
 8003e46:	18e1      	adds	r1, r4, r3
 8003e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e52:	4422      	add	r2, r4
 8003e54:	3302      	adds	r3, #2
 8003e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5a:	e7c5      	b.n	8003de8 <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa8>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x92>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	7e0f      	ldrb	r7, [r1, #24]
 8003e76:	4691      	mov	r9, r2
 8003e78:	2f78      	cmp	r7, #120	; 0x78
 8003e7a:	4680      	mov	r8, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	469a      	mov	sl, r3
 8003e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d9 	beq.w	8004044 <_printf_i+0x1d4>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80a4 	beq.w	8003fe0 <_printf_i+0x170>
 8003e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a101      	add	r1, pc, #4	; (adr r1, 8003eb0 <_printf_i+0x40>)
 8003eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	0800402b 	.word	0x0800402b
 8003ee0:	08003f4d 	.word	0x08003f4d
 8003ee4:	0800400d 	.word	0x0800400d
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800404d 	.word	0x0800404d
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08004015 	.word	0x08004015
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0a4      	b.n	8004066 <_printf_i+0x1f6>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	6829      	ldr	r1, [r5, #0]
 8003f20:	0606      	lsls	r6, r0, #24
 8003f22:	f101 0304 	add.w	r3, r1, #4
 8003f26:	d50a      	bpl.n	8003f3e <_printf_i+0xce>
 8003f28:	680e      	ldr	r6, [r1, #0]
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	2e00      	cmp	r6, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xc8>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	4276      	negs	r6, r6
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f38:	230a      	movs	r3, #10
 8003f3a:	485e      	ldr	r0, [pc, #376]	; (80040b4 <_printf_i+0x244>)
 8003f3c:	e019      	b.n	8003f72 <_printf_i+0x102>
 8003f3e:	680e      	ldr	r6, [r1, #0]
 8003f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	bf18      	it	ne
 8003f48:	b236      	sxthne	r6, r6
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0xbc>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6029      	str	r1, [r5, #0]
 8003f54:	0601      	lsls	r1, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xec>
 8003f58:	681e      	ldr	r6, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xf2>
 8003f5c:	0646      	lsls	r6, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f60:	881e      	ldrh	r6, [r3, #0]
 8003f62:	2f6f      	cmp	r7, #111	; 0x6f
 8003f64:	bf0c      	ite	eq
 8003f66:	2308      	moveq	r3, #8
 8003f68:	230a      	movne	r3, #10
 8003f6a:	4852      	ldr	r0, [pc, #328]	; (80040b4 <_printf_i+0x244>)
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6865      	ldr	r5, [r4, #4]
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	bfa8      	it	ge
 8003f78:	6821      	ldrge	r1, [r4, #0]
 8003f7a:	60a5      	str	r5, [r4, #8]
 8003f7c:	bfa4      	itt	ge
 8003f7e:	f021 0104 	bicge.w	r1, r1, #4
 8003f82:	6021      	strge	r1, [r4, #0]
 8003f84:	b90e      	cbnz	r6, 8003f8a <_printf_i+0x11a>
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d04d      	beq.n	8004026 <_printf_i+0x1b6>
 8003f8a:	4615      	mov	r5, r2
 8003f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f90:	fb03 6711 	mls	r7, r3, r1, r6
 8003f94:	5dc7      	ldrb	r7, [r0, r7]
 8003f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f9a:	4637      	mov	r7, r6
 8003f9c:	42bb      	cmp	r3, r7
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	d9f4      	bls.n	8003f8c <_printf_i+0x11c>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x14e>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07de      	lsls	r6, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x14e>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6861      	ldr	r1, [r4, #4]
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fbe:	1b52      	subs	r2, r2, r5
 8003fc0:	6122      	str	r2, [r4, #16]
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f8cd a000 	str.w	sl, [sp]
 8003fcc:	aa03      	add	r2, sp, #12
 8003fce:	f7ff fedf 	bl	8003d90 <_printf_common>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d14c      	bne.n	8004070 <_printf_i+0x200>
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fda:	b004      	add	sp, #16
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	4834      	ldr	r0, [pc, #208]	; (80040b4 <_printf_i+0x244>)
 8003fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fe6:	6829      	ldr	r1, [r5, #0]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fee:	6029      	str	r1, [r5, #0]
 8003ff0:	061d      	lsls	r5, r3, #24
 8003ff2:	d514      	bpl.n	800401e <_printf_i+0x1ae>
 8003ff4:	07df      	lsls	r7, r3, #31
 8003ff6:	bf44      	itt	mi
 8003ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffc:	6023      	strmi	r3, [r4, #0]
 8003ffe:	b91e      	cbnz	r6, 8004008 <_printf_i+0x198>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2310      	movs	r3, #16
 800400a:	e7af      	b.n	8003f6c <_printf_i+0xfc>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2378      	movs	r3, #120	; 0x78
 8004016:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_printf_i+0x248>)
 8004018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401c:	e7e3      	b.n	8003fe6 <_printf_i+0x176>
 800401e:	0659      	lsls	r1, r3, #25
 8004020:	bf48      	it	mi
 8004022:	b2b6      	uxthmi	r6, r6
 8004024:	e7e6      	b.n	8003ff4 <_printf_i+0x184>
 8004026:	4615      	mov	r5, r2
 8004028:	e7bb      	b.n	8003fa2 <_printf_i+0x132>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	6826      	ldr	r6, [r4, #0]
 800402e:	1d18      	adds	r0, r3, #4
 8004030:	6961      	ldr	r1, [r4, #20]
 8004032:	6028      	str	r0, [r5, #0]
 8004034:	0635      	lsls	r5, r6, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1ce>
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1d4>
 800403e:	0670      	lsls	r0, r6, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ca>
 8004042:	8019      	strh	r1, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	4615      	mov	r5, r2
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	e7ba      	b.n	8003fc2 <_printf_i+0x152>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	602a      	str	r2, [r5, #0]
 8004054:	681d      	ldr	r5, [r3, #0]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	4628      	mov	r0, r5
 800405a:	f000 f82f 	bl	80040bc <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1f4>
 8004060:	1b40      	subs	r0, r0, r5
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406e:	e7a8      	b.n	8003fc2 <_printf_i+0x152>
 8004070:	462a      	mov	r2, r5
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ab      	beq.n	8003fd6 <_printf_i+0x166>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x23c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a4      	b.n	8003fda <_printf_i+0x16a>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09b      	beq.n	8003fd6 <_printf_i+0x166>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x220>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x214>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x230>
 80040b4:	08004eed 	.word	0x08004eed
 80040b8:	08004efe 	.word	0x08004efe

080040bc <memchr>:
 80040bc:	4603      	mov	r3, r0
 80040be:	b510      	push	{r4, lr}
 80040c0:	b2c9      	uxtb	r1, r1
 80040c2:	4402      	add	r2, r0
 80040c4:	4293      	cmp	r3, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	d101      	bne.n	80040ce <memchr+0x12>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e003      	b.n	80040d6 <memchr+0x1a>
 80040ce:	7804      	ldrb	r4, [r0, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	428c      	cmp	r4, r1
 80040d4:	d1f6      	bne.n	80040c4 <memchr+0x8>
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <memcpy>:
 80040d8:	440a      	add	r2, r1
 80040da:	4291      	cmp	r1, r2
 80040dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80040e0:	d100      	bne.n	80040e4 <memcpy+0xc>
 80040e2:	4770      	bx	lr
 80040e4:	b510      	push	{r4, lr}
 80040e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ea:	4291      	cmp	r1, r2
 80040ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040f0:	d1f9      	bne.n	80040e6 <memcpy+0xe>
 80040f2:	bd10      	pop	{r4, pc}

080040f4 <memmove>:
 80040f4:	4288      	cmp	r0, r1
 80040f6:	b510      	push	{r4, lr}
 80040f8:	eb01 0402 	add.w	r4, r1, r2
 80040fc:	d902      	bls.n	8004104 <memmove+0x10>
 80040fe:	4284      	cmp	r4, r0
 8004100:	4623      	mov	r3, r4
 8004102:	d807      	bhi.n	8004114 <memmove+0x20>
 8004104:	1e43      	subs	r3, r0, #1
 8004106:	42a1      	cmp	r1, r4
 8004108:	d008      	beq.n	800411c <memmove+0x28>
 800410a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800410e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004112:	e7f8      	b.n	8004106 <memmove+0x12>
 8004114:	4601      	mov	r1, r0
 8004116:	4402      	add	r2, r0
 8004118:	428a      	cmp	r2, r1
 800411a:	d100      	bne.n	800411e <memmove+0x2a>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004126:	e7f7      	b.n	8004118 <memmove+0x24>

08004128 <_free_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	2900      	cmp	r1, #0
 800412e:	d040      	beq.n	80041b2 <_free_r+0x8a>
 8004130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004134:	1f0c      	subs	r4, r1, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfb8      	it	lt
 800413a:	18e4      	addlt	r4, r4, r3
 800413c:	f000 f910 	bl	8004360 <__malloc_lock>
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <_free_r+0x8c>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	b933      	cbnz	r3, 8004154 <_free_r+0x2c>
 8004146:	6063      	str	r3, [r4, #4]
 8004148:	6014      	str	r4, [r2, #0]
 800414a:	4628      	mov	r0, r5
 800414c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004150:	f000 b90c 	b.w	800436c <__malloc_unlock>
 8004154:	42a3      	cmp	r3, r4
 8004156:	d908      	bls.n	800416a <_free_r+0x42>
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	1821      	adds	r1, r4, r0
 800415c:	428b      	cmp	r3, r1
 800415e:	bf01      	itttt	eq
 8004160:	6819      	ldreq	r1, [r3, #0]
 8004162:	685b      	ldreq	r3, [r3, #4]
 8004164:	1809      	addeq	r1, r1, r0
 8004166:	6021      	streq	r1, [r4, #0]
 8004168:	e7ed      	b.n	8004146 <_free_r+0x1e>
 800416a:	461a      	mov	r2, r3
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b10b      	cbz	r3, 8004174 <_free_r+0x4c>
 8004170:	42a3      	cmp	r3, r4
 8004172:	d9fa      	bls.n	800416a <_free_r+0x42>
 8004174:	6811      	ldr	r1, [r2, #0]
 8004176:	1850      	adds	r0, r2, r1
 8004178:	42a0      	cmp	r0, r4
 800417a:	d10b      	bne.n	8004194 <_free_r+0x6c>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	4401      	add	r1, r0
 8004180:	1850      	adds	r0, r2, r1
 8004182:	4283      	cmp	r3, r0
 8004184:	6011      	str	r1, [r2, #0]
 8004186:	d1e0      	bne.n	800414a <_free_r+0x22>
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4401      	add	r1, r0
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	6053      	str	r3, [r2, #4]
 8004192:	e7da      	b.n	800414a <_free_r+0x22>
 8004194:	d902      	bls.n	800419c <_free_r+0x74>
 8004196:	230c      	movs	r3, #12
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	e7d6      	b.n	800414a <_free_r+0x22>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	428b      	cmp	r3, r1
 80041a2:	bf01      	itttt	eq
 80041a4:	6819      	ldreq	r1, [r3, #0]
 80041a6:	685b      	ldreq	r3, [r3, #4]
 80041a8:	1809      	addeq	r1, r1, r0
 80041aa:	6021      	streq	r1, [r4, #0]
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6054      	str	r4, [r2, #4]
 80041b0:	e7cb      	b.n	800414a <_free_r+0x22>
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	20000134 	.word	0x20000134

080041b8 <sbrk_aligned>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	4e0e      	ldr	r6, [pc, #56]	; (80041f4 <sbrk_aligned+0x3c>)
 80041bc:	460c      	mov	r4, r1
 80041be:	6831      	ldr	r1, [r6, #0]
 80041c0:	4605      	mov	r5, r0
 80041c2:	b911      	cbnz	r1, 80041ca <sbrk_aligned+0x12>
 80041c4:	f000 f8bc 	bl	8004340 <_sbrk_r>
 80041c8:	6030      	str	r0, [r6, #0]
 80041ca:	4621      	mov	r1, r4
 80041cc:	4628      	mov	r0, r5
 80041ce:	f000 f8b7 	bl	8004340 <_sbrk_r>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	d00a      	beq.n	80041ec <sbrk_aligned+0x34>
 80041d6:	1cc4      	adds	r4, r0, #3
 80041d8:	f024 0403 	bic.w	r4, r4, #3
 80041dc:	42a0      	cmp	r0, r4
 80041de:	d007      	beq.n	80041f0 <sbrk_aligned+0x38>
 80041e0:	1a21      	subs	r1, r4, r0
 80041e2:	4628      	mov	r0, r5
 80041e4:	f000 f8ac 	bl	8004340 <_sbrk_r>
 80041e8:	3001      	adds	r0, #1
 80041ea:	d101      	bne.n	80041f0 <sbrk_aligned+0x38>
 80041ec:	f04f 34ff 	mov.w	r4, #4294967295
 80041f0:	4620      	mov	r0, r4
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	20000138 	.word	0x20000138

080041f8 <_malloc_r>:
 80041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fc:	1ccd      	adds	r5, r1, #3
 80041fe:	f025 0503 	bic.w	r5, r5, #3
 8004202:	3508      	adds	r5, #8
 8004204:	2d0c      	cmp	r5, #12
 8004206:	bf38      	it	cc
 8004208:	250c      	movcc	r5, #12
 800420a:	2d00      	cmp	r5, #0
 800420c:	4607      	mov	r7, r0
 800420e:	db01      	blt.n	8004214 <_malloc_r+0x1c>
 8004210:	42a9      	cmp	r1, r5
 8004212:	d905      	bls.n	8004220 <_malloc_r+0x28>
 8004214:	230c      	movs	r3, #12
 8004216:	2600      	movs	r6, #0
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4630      	mov	r0, r6
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004220:	4e2e      	ldr	r6, [pc, #184]	; (80042dc <_malloc_r+0xe4>)
 8004222:	f000 f89d 	bl	8004360 <__malloc_lock>
 8004226:	6833      	ldr	r3, [r6, #0]
 8004228:	461c      	mov	r4, r3
 800422a:	bb34      	cbnz	r4, 800427a <_malloc_r+0x82>
 800422c:	4629      	mov	r1, r5
 800422e:	4638      	mov	r0, r7
 8004230:	f7ff ffc2 	bl	80041b8 <sbrk_aligned>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	4604      	mov	r4, r0
 8004238:	d14d      	bne.n	80042d6 <_malloc_r+0xde>
 800423a:	6834      	ldr	r4, [r6, #0]
 800423c:	4626      	mov	r6, r4
 800423e:	2e00      	cmp	r6, #0
 8004240:	d140      	bne.n	80042c4 <_malloc_r+0xcc>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	4631      	mov	r1, r6
 8004246:	4638      	mov	r0, r7
 8004248:	eb04 0803 	add.w	r8, r4, r3
 800424c:	f000 f878 	bl	8004340 <_sbrk_r>
 8004250:	4580      	cmp	r8, r0
 8004252:	d13a      	bne.n	80042ca <_malloc_r+0xd2>
 8004254:	6821      	ldr	r1, [r4, #0]
 8004256:	3503      	adds	r5, #3
 8004258:	1a6d      	subs	r5, r5, r1
 800425a:	f025 0503 	bic.w	r5, r5, #3
 800425e:	3508      	adds	r5, #8
 8004260:	2d0c      	cmp	r5, #12
 8004262:	bf38      	it	cc
 8004264:	250c      	movcc	r5, #12
 8004266:	4638      	mov	r0, r7
 8004268:	4629      	mov	r1, r5
 800426a:	f7ff ffa5 	bl	80041b8 <sbrk_aligned>
 800426e:	3001      	adds	r0, #1
 8004270:	d02b      	beq.n	80042ca <_malloc_r+0xd2>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	442b      	add	r3, r5
 8004276:	6023      	str	r3, [r4, #0]
 8004278:	e00e      	b.n	8004298 <_malloc_r+0xa0>
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	1b52      	subs	r2, r2, r5
 800427e:	d41e      	bmi.n	80042be <_malloc_r+0xc6>
 8004280:	2a0b      	cmp	r2, #11
 8004282:	d916      	bls.n	80042b2 <_malloc_r+0xba>
 8004284:	1961      	adds	r1, r4, r5
 8004286:	42a3      	cmp	r3, r4
 8004288:	6025      	str	r5, [r4, #0]
 800428a:	bf18      	it	ne
 800428c:	6059      	strne	r1, [r3, #4]
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	bf08      	it	eq
 8004292:	6031      	streq	r1, [r6, #0]
 8004294:	5162      	str	r2, [r4, r5]
 8004296:	604b      	str	r3, [r1, #4]
 8004298:	4638      	mov	r0, r7
 800429a:	f104 060b 	add.w	r6, r4, #11
 800429e:	f000 f865 	bl	800436c <__malloc_unlock>
 80042a2:	f026 0607 	bic.w	r6, r6, #7
 80042a6:	1d23      	adds	r3, r4, #4
 80042a8:	1af2      	subs	r2, r6, r3
 80042aa:	d0b6      	beq.n	800421a <_malloc_r+0x22>
 80042ac:	1b9b      	subs	r3, r3, r6
 80042ae:	50a3      	str	r3, [r4, r2]
 80042b0:	e7b3      	b.n	800421a <_malloc_r+0x22>
 80042b2:	6862      	ldr	r2, [r4, #4]
 80042b4:	42a3      	cmp	r3, r4
 80042b6:	bf0c      	ite	eq
 80042b8:	6032      	streq	r2, [r6, #0]
 80042ba:	605a      	strne	r2, [r3, #4]
 80042bc:	e7ec      	b.n	8004298 <_malloc_r+0xa0>
 80042be:	4623      	mov	r3, r4
 80042c0:	6864      	ldr	r4, [r4, #4]
 80042c2:	e7b2      	b.n	800422a <_malloc_r+0x32>
 80042c4:	4634      	mov	r4, r6
 80042c6:	6876      	ldr	r6, [r6, #4]
 80042c8:	e7b9      	b.n	800423e <_malloc_r+0x46>
 80042ca:	230c      	movs	r3, #12
 80042cc:	4638      	mov	r0, r7
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	f000 f84c 	bl	800436c <__malloc_unlock>
 80042d4:	e7a1      	b.n	800421a <_malloc_r+0x22>
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	e7de      	b.n	8004298 <_malloc_r+0xa0>
 80042da:	bf00      	nop
 80042dc:	20000134 	.word	0x20000134

080042e0 <_realloc_r>:
 80042e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e4:	4680      	mov	r8, r0
 80042e6:	4614      	mov	r4, r2
 80042e8:	460e      	mov	r6, r1
 80042ea:	b921      	cbnz	r1, 80042f6 <_realloc_r+0x16>
 80042ec:	4611      	mov	r1, r2
 80042ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f2:	f7ff bf81 	b.w	80041f8 <_malloc_r>
 80042f6:	b92a      	cbnz	r2, 8004304 <_realloc_r+0x24>
 80042f8:	f7ff ff16 	bl	8004128 <_free_r>
 80042fc:	4625      	mov	r5, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004304:	f000 f838 	bl	8004378 <_malloc_usable_size_r>
 8004308:	4284      	cmp	r4, r0
 800430a:	4607      	mov	r7, r0
 800430c:	d802      	bhi.n	8004314 <_realloc_r+0x34>
 800430e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004312:	d812      	bhi.n	800433a <_realloc_r+0x5a>
 8004314:	4621      	mov	r1, r4
 8004316:	4640      	mov	r0, r8
 8004318:	f7ff ff6e 	bl	80041f8 <_malloc_r>
 800431c:	4605      	mov	r5, r0
 800431e:	2800      	cmp	r0, #0
 8004320:	d0ed      	beq.n	80042fe <_realloc_r+0x1e>
 8004322:	42bc      	cmp	r4, r7
 8004324:	4622      	mov	r2, r4
 8004326:	4631      	mov	r1, r6
 8004328:	bf28      	it	cs
 800432a:	463a      	movcs	r2, r7
 800432c:	f7ff fed4 	bl	80040d8 <memcpy>
 8004330:	4631      	mov	r1, r6
 8004332:	4640      	mov	r0, r8
 8004334:	f7ff fef8 	bl	8004128 <_free_r>
 8004338:	e7e1      	b.n	80042fe <_realloc_r+0x1e>
 800433a:	4635      	mov	r5, r6
 800433c:	e7df      	b.n	80042fe <_realloc_r+0x1e>
	...

08004340 <_sbrk_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	2300      	movs	r3, #0
 8004344:	4d05      	ldr	r5, [pc, #20]	; (800435c <_sbrk_r+0x1c>)
 8004346:	4604      	mov	r4, r0
 8004348:	4608      	mov	r0, r1
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	f7fd fab8 	bl	80018c0 <_sbrk>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d102      	bne.n	800435a <_sbrk_r+0x1a>
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	b103      	cbz	r3, 800435a <_sbrk_r+0x1a>
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	2000013c 	.word	0x2000013c

08004360 <__malloc_lock>:
 8004360:	4801      	ldr	r0, [pc, #4]	; (8004368 <__malloc_lock+0x8>)
 8004362:	f000 b811 	b.w	8004388 <__retarget_lock_acquire_recursive>
 8004366:	bf00      	nop
 8004368:	20000140 	.word	0x20000140

0800436c <__malloc_unlock>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__malloc_unlock+0x8>)
 800436e:	f000 b80c 	b.w	800438a <__retarget_lock_release_recursive>
 8004372:	bf00      	nop
 8004374:	20000140 	.word	0x20000140

08004378 <_malloc_usable_size_r>:
 8004378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800437c:	1f18      	subs	r0, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfbc      	itt	lt
 8004382:	580b      	ldrlt	r3, [r1, r0]
 8004384:	18c0      	addlt	r0, r0, r3
 8004386:	4770      	bx	lr

08004388 <__retarget_lock_acquire_recursive>:
 8004388:	4770      	bx	lr

0800438a <__retarget_lock_release_recursive>:
 800438a:	4770      	bx	lr

0800438c <atan2>:
 800438c:	f000 b800 	b.w	8004390 <__ieee754_atan2>

08004390 <__ieee754_atan2>:
 8004390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004394:	4692      	mov	sl, r2
 8004396:	4699      	mov	r9, r3
 8004398:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800439c:	461f      	mov	r7, r3
 800439e:	f1ca 0300 	rsb	r3, sl, #0
 80043a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8004528 <__ieee754_atan2+0x198>
 80043a6:	ea43 030a 	orr.w	r3, r3, sl
 80043aa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80043ae:	4573      	cmp	r3, lr
 80043b0:	4604      	mov	r4, r0
 80043b2:	460d      	mov	r5, r1
 80043b4:	d808      	bhi.n	80043c8 <__ieee754_atan2+0x38>
 80043b6:	4246      	negs	r6, r0
 80043b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043bc:	4306      	orrs	r6, r0
 80043be:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80043c2:	4576      	cmp	r6, lr
 80043c4:	468c      	mov	ip, r1
 80043c6:	d908      	bls.n	80043da <__ieee754_atan2+0x4a>
 80043c8:	4652      	mov	r2, sl
 80043ca:	464b      	mov	r3, r9
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fb ff30 	bl	8000234 <__adddf3>
 80043d4:	4604      	mov	r4, r0
 80043d6:	460d      	mov	r5, r1
 80043d8:	e019      	b.n	800440e <__ieee754_atan2+0x7e>
 80043da:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80043de:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80043e2:	ea56 060a 	orrs.w	r6, r6, sl
 80043e6:	d103      	bne.n	80043f0 <__ieee754_atan2+0x60>
 80043e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	f000 b8a4 	b.w	8004538 <atan>
 80043f0:	17be      	asrs	r6, r7, #30
 80043f2:	f006 0602 	and.w	r6, r6, #2
 80043f6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80043fa:	ea53 0100 	orrs.w	r1, r3, r0
 80043fe:	d10a      	bne.n	8004416 <__ieee754_atan2+0x86>
 8004400:	2e02      	cmp	r6, #2
 8004402:	d067      	beq.n	80044d4 <__ieee754_atan2+0x144>
 8004404:	2e03      	cmp	r6, #3
 8004406:	d102      	bne.n	800440e <__ieee754_atan2+0x7e>
 8004408:	a53b      	add	r5, pc, #236	; (adr r5, 80044f8 <__ieee754_atan2+0x168>)
 800440a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	ea52 010a 	orrs.w	r1, r2, sl
 800441a:	d106      	bne.n	800442a <__ieee754_atan2+0x9a>
 800441c:	f1bc 0f00 	cmp.w	ip, #0
 8004420:	da63      	bge.n	80044ea <__ieee754_atan2+0x15a>
 8004422:	a537      	add	r5, pc, #220	; (adr r5, 8004500 <__ieee754_atan2+0x170>)
 8004424:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004428:	e7f1      	b.n	800440e <__ieee754_atan2+0x7e>
 800442a:	4572      	cmp	r2, lr
 800442c:	d10f      	bne.n	800444e <__ieee754_atan2+0xbe>
 800442e:	4293      	cmp	r3, r2
 8004430:	f106 36ff 	add.w	r6, r6, #4294967295
 8004434:	d107      	bne.n	8004446 <__ieee754_atan2+0xb6>
 8004436:	2e02      	cmp	r6, #2
 8004438:	d850      	bhi.n	80044dc <__ieee754_atan2+0x14c>
 800443a:	4b3c      	ldr	r3, [pc, #240]	; (800452c <__ieee754_atan2+0x19c>)
 800443c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004440:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004444:	e7e3      	b.n	800440e <__ieee754_atan2+0x7e>
 8004446:	2e02      	cmp	r6, #2
 8004448:	d84c      	bhi.n	80044e4 <__ieee754_atan2+0x154>
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <__ieee754_atan2+0x1a0>)
 800444c:	e7f6      	b.n	800443c <__ieee754_atan2+0xac>
 800444e:	4573      	cmp	r3, lr
 8004450:	d0e4      	beq.n	800441c <__ieee754_atan2+0x8c>
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004458:	ea4f 5223 	mov.w	r2, r3, asr #20
 800445c:	da20      	bge.n	80044a0 <__ieee754_atan2+0x110>
 800445e:	2f00      	cmp	r7, #0
 8004460:	da01      	bge.n	8004466 <__ieee754_atan2+0xd6>
 8004462:	323c      	adds	r2, #60	; 0x3c
 8004464:	db20      	blt.n	80044a8 <__ieee754_atan2+0x118>
 8004466:	4652      	mov	r2, sl
 8004468:	464b      	mov	r3, r9
 800446a:	4620      	mov	r0, r4
 800446c:	4629      	mov	r1, r5
 800446e:	f7fc f9c1 	bl	80007f4 <__aeabi_ddiv>
 8004472:	f000 f9eb 	bl	800484c <fabs>
 8004476:	f000 f85f 	bl	8004538 <atan>
 800447a:	4604      	mov	r4, r0
 800447c:	460d      	mov	r5, r1
 800447e:	2e01      	cmp	r6, #1
 8004480:	d015      	beq.n	80044ae <__ieee754_atan2+0x11e>
 8004482:	2e02      	cmp	r6, #2
 8004484:	d017      	beq.n	80044b6 <__ieee754_atan2+0x126>
 8004486:	2e00      	cmp	r6, #0
 8004488:	d0c1      	beq.n	800440e <__ieee754_atan2+0x7e>
 800448a:	a31f      	add	r3, pc, #124	; (adr r3, 8004508 <__ieee754_atan2+0x178>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	4620      	mov	r0, r4
 8004492:	4629      	mov	r1, r5
 8004494:	f7fb fecc 	bl	8000230 <__aeabi_dsub>
 8004498:	a31d      	add	r3, pc, #116	; (adr r3, 8004510 <__ieee754_atan2+0x180>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	e016      	b.n	80044ce <__ieee754_atan2+0x13e>
 80044a0:	a51d      	add	r5, pc, #116	; (adr r5, 8004518 <__ieee754_atan2+0x188>)
 80044a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80044a6:	e7ea      	b.n	800447e <__ieee754_atan2+0xee>
 80044a8:	2400      	movs	r4, #0
 80044aa:	2500      	movs	r5, #0
 80044ac:	e7e7      	b.n	800447e <__ieee754_atan2+0xee>
 80044ae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80044b2:	461d      	mov	r5, r3
 80044b4:	e7ab      	b.n	800440e <__ieee754_atan2+0x7e>
 80044b6:	a314      	add	r3, pc, #80	; (adr r3, 8004508 <__ieee754_atan2+0x178>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	4620      	mov	r0, r4
 80044be:	4629      	mov	r1, r5
 80044c0:	f7fb feb6 	bl	8000230 <__aeabi_dsub>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	a111      	add	r1, pc, #68	; (adr r1, 8004510 <__ieee754_atan2+0x180>)
 80044ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ce:	f7fb feaf 	bl	8000230 <__aeabi_dsub>
 80044d2:	e77f      	b.n	80043d4 <__ieee754_atan2+0x44>
 80044d4:	a50e      	add	r5, pc, #56	; (adr r5, 8004510 <__ieee754_atan2+0x180>)
 80044d6:	e9d5 4500 	ldrd	r4, r5, [r5]
 80044da:	e798      	b.n	800440e <__ieee754_atan2+0x7e>
 80044dc:	a510      	add	r5, pc, #64	; (adr r5, 8004520 <__ieee754_atan2+0x190>)
 80044de:	e9d5 4500 	ldrd	r4, r5, [r5]
 80044e2:	e794      	b.n	800440e <__ieee754_atan2+0x7e>
 80044e4:	2400      	movs	r4, #0
 80044e6:	2500      	movs	r5, #0
 80044e8:	e791      	b.n	800440e <__ieee754_atan2+0x7e>
 80044ea:	a50b      	add	r5, pc, #44	; (adr r5, 8004518 <__ieee754_atan2+0x188>)
 80044ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 80044f0:	e78d      	b.n	800440e <__ieee754_atan2+0x7e>
 80044f2:	bf00      	nop
 80044f4:	f3af 8000 	nop.w
 80044f8:	54442d18 	.word	0x54442d18
 80044fc:	c00921fb 	.word	0xc00921fb
 8004500:	54442d18 	.word	0x54442d18
 8004504:	bff921fb 	.word	0xbff921fb
 8004508:	33145c07 	.word	0x33145c07
 800450c:	3ca1a626 	.word	0x3ca1a626
 8004510:	54442d18 	.word	0x54442d18
 8004514:	400921fb 	.word	0x400921fb
 8004518:	54442d18 	.word	0x54442d18
 800451c:	3ff921fb 	.word	0x3ff921fb
 8004520:	54442d18 	.word	0x54442d18
 8004524:	3fe921fb 	.word	0x3fe921fb
 8004528:	7ff00000 	.word	0x7ff00000
 800452c:	08004f10 	.word	0x08004f10
 8004530:	08004f28 	.word	0x08004f28
 8004534:	00000000 	.word	0x00000000

08004538 <atan>:
 8004538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	4bb6      	ldr	r3, [pc, #728]	; (8004818 <atan+0x2e0>)
 800453e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004542:	429e      	cmp	r6, r3
 8004544:	4604      	mov	r4, r0
 8004546:	460d      	mov	r5, r1
 8004548:	468b      	mov	fp, r1
 800454a:	dd17      	ble.n	800457c <atan+0x44>
 800454c:	4bb3      	ldr	r3, [pc, #716]	; (800481c <atan+0x2e4>)
 800454e:	429e      	cmp	r6, r3
 8004550:	dc01      	bgt.n	8004556 <atan+0x1e>
 8004552:	d109      	bne.n	8004568 <atan+0x30>
 8004554:	b140      	cbz	r0, 8004568 <atan+0x30>
 8004556:	4622      	mov	r2, r4
 8004558:	462b      	mov	r3, r5
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	f7fb fe69 	bl	8000234 <__adddf3>
 8004562:	4604      	mov	r4, r0
 8004564:	460d      	mov	r5, r1
 8004566:	e005      	b.n	8004574 <atan+0x3c>
 8004568:	f1bb 0f00 	cmp.w	fp, #0
 800456c:	4cac      	ldr	r4, [pc, #688]	; (8004820 <atan+0x2e8>)
 800456e:	f300 8121 	bgt.w	80047b4 <atan+0x27c>
 8004572:	4dac      	ldr	r5, [pc, #688]	; (8004824 <atan+0x2ec>)
 8004574:	4620      	mov	r0, r4
 8004576:	4629      	mov	r1, r5
 8004578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457c:	4baa      	ldr	r3, [pc, #680]	; (8004828 <atan+0x2f0>)
 800457e:	429e      	cmp	r6, r3
 8004580:	dc11      	bgt.n	80045a6 <atan+0x6e>
 8004582:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004586:	429e      	cmp	r6, r3
 8004588:	dc0a      	bgt.n	80045a0 <atan+0x68>
 800458a:	a38b      	add	r3, pc, #556	; (adr r3, 80047b8 <atan+0x280>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fb fe50 	bl	8000234 <__adddf3>
 8004594:	2200      	movs	r2, #0
 8004596:	4ba5      	ldr	r3, [pc, #660]	; (800482c <atan+0x2f4>)
 8004598:	f7fc fa92 	bl	8000ac0 <__aeabi_dcmpgt>
 800459c:	2800      	cmp	r0, #0
 800459e:	d1e9      	bne.n	8004574 <atan+0x3c>
 80045a0:	f04f 3aff 	mov.w	sl, #4294967295
 80045a4:	e027      	b.n	80045f6 <atan+0xbe>
 80045a6:	f000 f951 	bl	800484c <fabs>
 80045aa:	4ba1      	ldr	r3, [pc, #644]	; (8004830 <atan+0x2f8>)
 80045ac:	4604      	mov	r4, r0
 80045ae:	429e      	cmp	r6, r3
 80045b0:	460d      	mov	r5, r1
 80045b2:	f300 80b8 	bgt.w	8004726 <atan+0x1ee>
 80045b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80045ba:	429e      	cmp	r6, r3
 80045bc:	f300 809c 	bgt.w	80046f8 <atan+0x1c0>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	f7fb fe36 	bl	8000234 <__adddf3>
 80045c8:	2200      	movs	r2, #0
 80045ca:	4b98      	ldr	r3, [pc, #608]	; (800482c <atan+0x2f4>)
 80045cc:	f7fb fe30 	bl	8000230 <__aeabi_dsub>
 80045d0:	2200      	movs	r2, #0
 80045d2:	4606      	mov	r6, r0
 80045d4:	460f      	mov	r7, r1
 80045d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fb fe29 	bl	8000234 <__adddf3>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4630      	mov	r0, r6
 80045e8:	4639      	mov	r1, r7
 80045ea:	f7fc f903 	bl	80007f4 <__aeabi_ddiv>
 80045ee:	f04f 0a00 	mov.w	sl, #0
 80045f2:	4604      	mov	r4, r0
 80045f4:	460d      	mov	r5, r1
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	4620      	mov	r0, r4
 80045fc:	4629      	mov	r1, r5
 80045fe:	f7fb ffcf 	bl	80005a0 <__aeabi_dmul>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4680      	mov	r8, r0
 8004608:	4689      	mov	r9, r1
 800460a:	f7fb ffc9 	bl	80005a0 <__aeabi_dmul>
 800460e:	a36c      	add	r3, pc, #432	; (adr r3, 80047c0 <atan+0x288>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	4606      	mov	r6, r0
 8004616:	460f      	mov	r7, r1
 8004618:	f7fb ffc2 	bl	80005a0 <__aeabi_dmul>
 800461c:	a36a      	add	r3, pc, #424	; (adr r3, 80047c8 <atan+0x290>)
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f7fb fe07 	bl	8000234 <__adddf3>
 8004626:	4632      	mov	r2, r6
 8004628:	463b      	mov	r3, r7
 800462a:	f7fb ffb9 	bl	80005a0 <__aeabi_dmul>
 800462e:	a368      	add	r3, pc, #416	; (adr r3, 80047d0 <atan+0x298>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fb fdfe 	bl	8000234 <__adddf3>
 8004638:	4632      	mov	r2, r6
 800463a:	463b      	mov	r3, r7
 800463c:	f7fb ffb0 	bl	80005a0 <__aeabi_dmul>
 8004640:	a365      	add	r3, pc, #404	; (adr r3, 80047d8 <atan+0x2a0>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f7fb fdf5 	bl	8000234 <__adddf3>
 800464a:	4632      	mov	r2, r6
 800464c:	463b      	mov	r3, r7
 800464e:	f7fb ffa7 	bl	80005a0 <__aeabi_dmul>
 8004652:	a363      	add	r3, pc, #396	; (adr r3, 80047e0 <atan+0x2a8>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb fdec 	bl	8000234 <__adddf3>
 800465c:	4632      	mov	r2, r6
 800465e:	463b      	mov	r3, r7
 8004660:	f7fb ff9e 	bl	80005a0 <__aeabi_dmul>
 8004664:	a360      	add	r3, pc, #384	; (adr r3, 80047e8 <atan+0x2b0>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb fde3 	bl	8000234 <__adddf3>
 800466e:	4642      	mov	r2, r8
 8004670:	464b      	mov	r3, r9
 8004672:	f7fb ff95 	bl	80005a0 <__aeabi_dmul>
 8004676:	a35e      	add	r3, pc, #376	; (adr r3, 80047f0 <atan+0x2b8>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	4680      	mov	r8, r0
 800467e:	4689      	mov	r9, r1
 8004680:	4630      	mov	r0, r6
 8004682:	4639      	mov	r1, r7
 8004684:	f7fb ff8c 	bl	80005a0 <__aeabi_dmul>
 8004688:	a35b      	add	r3, pc, #364	; (adr r3, 80047f8 <atan+0x2c0>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fb fdcf 	bl	8000230 <__aeabi_dsub>
 8004692:	4632      	mov	r2, r6
 8004694:	463b      	mov	r3, r7
 8004696:	f7fb ff83 	bl	80005a0 <__aeabi_dmul>
 800469a:	a359      	add	r3, pc, #356	; (adr r3, 8004800 <atan+0x2c8>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fb fdc6 	bl	8000230 <__aeabi_dsub>
 80046a4:	4632      	mov	r2, r6
 80046a6:	463b      	mov	r3, r7
 80046a8:	f7fb ff7a 	bl	80005a0 <__aeabi_dmul>
 80046ac:	a356      	add	r3, pc, #344	; (adr r3, 8004808 <atan+0x2d0>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb fdbd 	bl	8000230 <__aeabi_dsub>
 80046b6:	4632      	mov	r2, r6
 80046b8:	463b      	mov	r3, r7
 80046ba:	f7fb ff71 	bl	80005a0 <__aeabi_dmul>
 80046be:	a354      	add	r3, pc, #336	; (adr r3, 8004810 <atan+0x2d8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb fdb4 	bl	8000230 <__aeabi_dsub>
 80046c8:	4632      	mov	r2, r6
 80046ca:	463b      	mov	r3, r7
 80046cc:	f7fb ff68 	bl	80005a0 <__aeabi_dmul>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4640      	mov	r0, r8
 80046d6:	4649      	mov	r1, r9
 80046d8:	f7fb fdac 	bl	8000234 <__adddf3>
 80046dc:	4622      	mov	r2, r4
 80046de:	462b      	mov	r3, r5
 80046e0:	f7fb ff5e 	bl	80005a0 <__aeabi_dmul>
 80046e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	d144      	bne.n	8004778 <atan+0x240>
 80046ee:	4620      	mov	r0, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	f7fb fd9d 	bl	8000230 <__aeabi_dsub>
 80046f6:	e734      	b.n	8004562 <atan+0x2a>
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b4c      	ldr	r3, [pc, #304]	; (800482c <atan+0x2f4>)
 80046fc:	f7fb fd98 	bl	8000230 <__aeabi_dsub>
 8004700:	2200      	movs	r2, #0
 8004702:	4606      	mov	r6, r0
 8004704:	460f      	mov	r7, r1
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <atan+0x2f4>)
 800470c:	f7fb fd92 	bl	8000234 <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4630      	mov	r0, r6
 8004716:	4639      	mov	r1, r7
 8004718:	f7fc f86c 	bl	80007f4 <__aeabi_ddiv>
 800471c:	f04f 0a01 	mov.w	sl, #1
 8004720:	4604      	mov	r4, r0
 8004722:	460d      	mov	r5, r1
 8004724:	e767      	b.n	80045f6 <atan+0xbe>
 8004726:	4b43      	ldr	r3, [pc, #268]	; (8004834 <atan+0x2fc>)
 8004728:	429e      	cmp	r6, r3
 800472a:	da1a      	bge.n	8004762 <atan+0x22a>
 800472c:	2200      	movs	r2, #0
 800472e:	4b42      	ldr	r3, [pc, #264]	; (8004838 <atan+0x300>)
 8004730:	f7fb fd7e 	bl	8000230 <__aeabi_dsub>
 8004734:	2200      	movs	r2, #0
 8004736:	4606      	mov	r6, r0
 8004738:	460f      	mov	r7, r1
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <atan+0x300>)
 8004740:	f7fb ff2e 	bl	80005a0 <__aeabi_dmul>
 8004744:	2200      	movs	r2, #0
 8004746:	4b39      	ldr	r3, [pc, #228]	; (800482c <atan+0x2f4>)
 8004748:	f7fb fd74 	bl	8000234 <__adddf3>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4630      	mov	r0, r6
 8004752:	4639      	mov	r1, r7
 8004754:	f7fc f84e 	bl	80007f4 <__aeabi_ddiv>
 8004758:	f04f 0a02 	mov.w	sl, #2
 800475c:	4604      	mov	r4, r0
 800475e:	460d      	mov	r5, r1
 8004760:	e749      	b.n	80045f6 <atan+0xbe>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	2000      	movs	r0, #0
 8004768:	4934      	ldr	r1, [pc, #208]	; (800483c <atan+0x304>)
 800476a:	f7fc f843 	bl	80007f4 <__aeabi_ddiv>
 800476e:	f04f 0a03 	mov.w	sl, #3
 8004772:	4604      	mov	r4, r0
 8004774:	460d      	mov	r5, r1
 8004776:	e73e      	b.n	80045f6 <atan+0xbe>
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <atan+0x308>)
 800477a:	4e32      	ldr	r6, [pc, #200]	; (8004844 <atan+0x30c>)
 800477c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004780:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004784:	e9da 2300 	ldrd	r2, r3, [sl]
 8004788:	f7fb fd52 	bl	8000230 <__aeabi_dsub>
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	f7fb fd4e 	bl	8000230 <__aeabi_dsub>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	e9d6 0100 	ldrd	r0, r1, [r6]
 800479c:	f7fb fd48 	bl	8000230 <__aeabi_dsub>
 80047a0:	f1bb 0f00 	cmp.w	fp, #0
 80047a4:	4604      	mov	r4, r0
 80047a6:	460d      	mov	r5, r1
 80047a8:	f6bf aee4 	bge.w	8004574 <atan+0x3c>
 80047ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047b0:	461d      	mov	r5, r3
 80047b2:	e6df      	b.n	8004574 <atan+0x3c>
 80047b4:	4d24      	ldr	r5, [pc, #144]	; (8004848 <atan+0x310>)
 80047b6:	e6dd      	b.n	8004574 <atan+0x3c>
 80047b8:	8800759c 	.word	0x8800759c
 80047bc:	7e37e43c 	.word	0x7e37e43c
 80047c0:	e322da11 	.word	0xe322da11
 80047c4:	3f90ad3a 	.word	0x3f90ad3a
 80047c8:	24760deb 	.word	0x24760deb
 80047cc:	3fa97b4b 	.word	0x3fa97b4b
 80047d0:	a0d03d51 	.word	0xa0d03d51
 80047d4:	3fb10d66 	.word	0x3fb10d66
 80047d8:	c54c206e 	.word	0xc54c206e
 80047dc:	3fb745cd 	.word	0x3fb745cd
 80047e0:	920083ff 	.word	0x920083ff
 80047e4:	3fc24924 	.word	0x3fc24924
 80047e8:	5555550d 	.word	0x5555550d
 80047ec:	3fd55555 	.word	0x3fd55555
 80047f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80047f4:	bfa2b444 	.word	0xbfa2b444
 80047f8:	52defd9a 	.word	0x52defd9a
 80047fc:	3fadde2d 	.word	0x3fadde2d
 8004800:	af749a6d 	.word	0xaf749a6d
 8004804:	3fb3b0f2 	.word	0x3fb3b0f2
 8004808:	fe231671 	.word	0xfe231671
 800480c:	3fbc71c6 	.word	0x3fbc71c6
 8004810:	9998ebc4 	.word	0x9998ebc4
 8004814:	3fc99999 	.word	0x3fc99999
 8004818:	440fffff 	.word	0x440fffff
 800481c:	7ff00000 	.word	0x7ff00000
 8004820:	54442d18 	.word	0x54442d18
 8004824:	bff921fb 	.word	0xbff921fb
 8004828:	3fdbffff 	.word	0x3fdbffff
 800482c:	3ff00000 	.word	0x3ff00000
 8004830:	3ff2ffff 	.word	0x3ff2ffff
 8004834:	40038000 	.word	0x40038000
 8004838:	3ff80000 	.word	0x3ff80000
 800483c:	bff00000 	.word	0xbff00000
 8004840:	08004f60 	.word	0x08004f60
 8004844:	08004f40 	.word	0x08004f40
 8004848:	3ff921fb 	.word	0x3ff921fb

0800484c <fabs>:
 800484c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004850:	4770      	bx	lr
	...

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
